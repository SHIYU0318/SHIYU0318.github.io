<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ 進階資料結構實作</title>
      <link href="/SHIYU0318.github.io/post/Data-Structures-advanced/"/>
      <url>/SHIYU0318.github.io/post/Data-Structures-advanced/</url>
      
        <content type="html"><![CDATA[<h1 id="撰寫中，敬請期待"><a href="#撰寫中，敬請期待" class="headerlink" title="撰寫中，敬請期待"></a>撰寫中，敬請期待</h1><h2 id="預計內容"><a href="#預計內容" class="headerlink" title="預計內容"></a>預計內容</h2><ul><li>並查集 Disjoint Set</li><li>線段樹 Segment Tree</li><li>樹狀數組 BIT</li><li>稀疏表 Sparse Table</li><li>樹堆 Treap</li><li>__gnu_pbds</li></ul><p>可先閱讀 <a href="https://shiyu0318.github.io/Data-Structures-basic/">C++ STL 內建基礎資料結構（Basic Data Structures）</a></p><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 程式筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 並查集 Disjoint Set </tag>
            
            <tag> 線段樹 Segment Tree </tag>
            
            <tag> 樹狀數組 BIT </tag>
            
            <tag> 稀疏表 Sparse Table </tag>
            
            <tag> 樹堆 Treap </tag>
            
            <tag> __gnu_pbds </tag>
            
            <tag> 資料結構 Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL 內建基礎資料結構</title>
      <link href="/SHIYU0318.github.io/post/Data-Structures-basic/"/>
      <url>/SHIYU0318.github.io/post/Data-Structures-basic/</url>
      
        <content type="html"><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>在去年 2022 的 12 月，我寫了一篇 <a href="https://shiyu0318.github.io/post/Data-Structures-python/">基礎資料結構 Data Structures (Python)</a> 簡單的介紹概念並以 python 實做了一些基礎資料結構，而自從我使用 C++ 後，接觸到了 C++ STL 內建的資料結構，於是我在今年 2023 年的 12 月寫了這篇文章，彙整了許多資料結構的概念與用法，文章內容較多，所有內容皆為收集的資料擷取並經過修改整理而成，文章內容若有任何錯誤或需要補充的地方都歡迎使用右側聊天室傳送訊息給我，我將會儘速修改，謝謝</p><h1 id="先備知識"><a href="#先備知識" class="headerlink" title="先備知識"></a>先備知識</h1><p>標準模板庫(Standard Template Library)，簡稱 <strong>STL</strong> 為 C++ 內建的函式庫<br>為了應對各種資料型態，因此採用 <code>模板 template</code> 來實作，分為六大部分：</p><ol><li>容器 Containers</li><li>演算法 Algotithm</li><li>迭代器 Iterator</li><li>適配器 Adaptor</li><li>仿函數 Function object</li><li>空間配置器 allocator</li></ol><blockquote><p>本篇文章內容只會出現前四大部分</p></blockquote><h2 id="符號解釋"><a href="#符號解釋" class="headerlink" title="符號解釋"></a>符號解釋</h2><p>對於本篇文章中各種符號的解釋</p><ul><li>C：某種容器(container)</li><li>T：某種資料型態(type)</li><li>S：長度(size)</li><li>i：索引(index)</li><li>val：值(value)</li><li>K：鍵值(key)</li><li>it：迭代器(iterator)</li></ul><h2 id="迭代器-iterator"><a href="#迭代器-iterator" class="headerlink" title="迭代器(iterator)"></a>迭代器(iterator)</h2><p>C++ STL 為每個容器提供一個成員型別：<code>迭代器 Iterator</code>，我們可以用 <code>指標 pointer</code> 的概念來理解迭代器(實際上，指標算是一種迭代器)</p><p>假設現在有個迭代器 <code>it</code>，如果要存取 <code>it</code> 所指向的內容，那就是在前面加上星號 <code>*it</code>，與指標相同</p><p>以下有迭代器的三種分類:</p><ol><li>隨機存取迭代器：這種迭代器能夠和整數的加減法，往 <code>後移 x 項</code>、往 <code>前移 x 項</code> 皆可，也可以 <code>遞增 (++)</code> 和 <code>遞減 (−−)</code>，可以把指標當作這種迭代器</li><li>雙向迭代器：只能做 <code>遞增 (++)</code> 和 <code>遞減 (−−)</code> 的運算，也就是 <code>後一項</code> 和 <code>前一項</code></li><li>單向迭代器：只能做 <code>遞增 (++)</code> 的運算，也就是 <code>後一項</code></li></ol><p>利用迭代器可<strong>遍歷容器中的元素</strong>，分為 <code>iterator</code> 和 <code>reverse_iterator</code><br>可用 <code>C.begin(), C.end()</code> 取得容器的 <code>起始</code> 和 <code>尾端</code><br><code>reverse_iterator</code> 則是 <code>C.rbegin(), C.rend()</code></p><p><code>iterator</code> 示意圖 (<a href="https://crmne0707.pixnet.net/blog/post/318479072-c%2B%2B-%E8%BF%AD%E4%BB%A3%E5%99%A8-iterator">圖片來源</a>)</p><p><img src="https://hackmd.io/_uploads/HJbllasvp.png" alt="iterator 示意圖"></p><hr><h1 id="資料結構的詳細介紹"><a href="#資料結構的詳細介紹" class="headerlink" title="資料結構的詳細介紹"></a>資料結構的詳細介紹</h1><h2 id="vector-動態陣列"><a href="#vector-動態陣列" class="headerlink" title="vector 動態陣列"></a>vector 動態陣列</h2><p>像是 C++ <code>陣列 array</code> 的升級版，可<strong>動態新增元素</strong>且能<strong>改變長度</strong>，不用事先宣告固定大小，且能支援原有的操作，基本上學完 <code>vector</code> 可直接取代 <code>array</code></p><h3 id="可支援的操作方法"><a href="#可支援的操作方法" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>v[i]</td><td>讀取 v 的第 i 項，複雜度 O(1)</td></tr><tr><td>v.empty()</td><td>回傳一個 bool，表示 v 是否為空的，複雜度 O(1)</td></tr><tr><td>v.clear()</td><td>清空 v，但原本的空間不會被釋放掉，複雜度 O(n)</td></tr><tr><td>v.size()</td><td>回傳 v 目前的長度，複雜度 O(1)</td></tr><tr><td>v.resize(S,val)</td><td>強制將 v 的長度變為 S，若比原本長，則後面加 val 直到長度為 S，若比原本短則將多出的部分捨去，複雜度 O(n)</td></tr><tr><td>v.reserve(S)</td><td>預留 S 個空間，若 S  &gt; v.size()，此函數不造成任何影響</td></tr><tr><td>v.capacity()</td><td>容量，預分配的內存空間</td></tr><tr><td>v.insert(it,val)</td><td>在 it 位置插入 val，複雜度 O(n)</td></tr><tr><td>v.erase(it)</td><td>刪除 it 位置元素，複雜度 O(n)</td></tr><tr><td>v.front() / v.back()</td><td>容器的首個元素或最後一個元素</td></tr><tr><td>v.push_back(val) / v.emplace_back(val)</td><td>在 v 的結尾加一個 val，均攤複雜度 O(1)</td></tr><tr><td>v.pop_back()</td><td>刪除 v 的最末項，若 v 為空，會發生無法預期的結果，複雜度 O(1)</td></tr><tr><td>v.begin() / v.end()</td><td>首個元素或最後一個元素的 iterator</td></tr><tr><td>v.shrink_to_fit()</td><td>將 v 的容量縮成剛好 size 的大小</td></tr></tbody></table></div><h3 id="可支援的演算法函數"><a href="#可支援的演算法函數" class="headerlink" title="可支援的演算法函數"></a>可支援的演算法函數</h3><div class="table-container"><table><thead><tr><th>演算法函數</th><th>功能介紹</th></tr></thead><tbody><tr><td>swap(v1,v2) / v1.swap(v2)</td><td>交換兩 vector</td></tr><tr><td>find(v.begin(), v.end(), val)</td><td>在 v 中查找 val，找到返回指定元素的迭代器，找不到返回结束迭代器end()</td></tr><tr><td>count(v.begin(), v.end(), val)</td><td>計算 v 中 val 出現的次數</td></tr><tr><td>replace(v.begin(), v.end(), val, new_val)</td><td>將 v 中的 val 全部替換成 new_val</td></tr><tr><td>sort(v.begin(), v.end())</td><td>排序 v</td></tr><tr><td>reverse(v.begin(), v.end())</td><td>反轉 v</td></tr><tr><td>merge(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin())</td><td>將 v1 與 v2 合併到 v3</td></tr><tr><td>binary_search(v.begin(), v.end(), val)</td><td>二分搜，如果在 v 中有找到 val 回傳 1，否則回傳 0</td></tr><tr><td>lower_bound(v.begin(), v.end(), val)</td><td>回傳在 v.begin() 位置(包含)到 v.end() 位置(不含)之間第一個 &gt;= val 的元素的位置</td></tr><tr><td>upper_bound(v.begin(), v.end(), val)</td><td>回傳在 v.begin() 位置(包含)到 v.end() 位置(不含)之間第一個 &gt; val 的元素的位置</td></tr><tr><td>next_permutation(v.begin(),v.end())</td><td>下一个排列组合</td></tr><tr><td>prev_permutation(v.begin(),v.end())</td><td>上一个排列组合</td></tr></tbody></table></div><blockquote><p><code>lower_bound</code> / <code>upper_bound</code> 可透過 <code>*</code> 取值，需在<strong>由小到大排列好的陣列</strong>中才可使用，若回傳的值是 <code>v.end()</code>，代表沒有符合的元素</p></blockquote><h3 id="常用基本操作-Code"><a href="#常用基本操作-Code" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v;    <span class="comment">// 長度為 0 的空 vector</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>)</span></span>; <span class="comment">// 長度為 5 的 vector</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>,<span class="number">10</span>)</span></span>; </span><br><span class="line"><span class="comment">// 長度為 5 且每個元素皆被初始化為 10 的 vector，複雜度為 O(n)</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宣告雙層 vector</span></span><br><span class="line">vector&lt; vector&lt;<span class="type">int</span>&gt; &gt; vv;</span><br><span class="line"><span class="comment">// 可想像成二維陣列，但每一列長度可以不一樣</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line"><span class="type">int</span> n = v[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 與陣列一樣可使用 index 取值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得長度</span></span><br><span class="line"><span class="type">int</span> s = v.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改大小</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">5</span>);    <span class="comment">// 將 v 的長度更改為 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在尾端加入元素</span></span><br><span class="line"><span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">v.<span class="built_in">push_back</span>(n);</span><br><span class="line">v.<span class="built_in">emplace_back</span>(n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除尾端元素</span></span><br><span class="line">v.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尋找</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> val; cin &gt;&gt; <span class="function">val</span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(find(v.begin(), v.end(), val) == v.end())</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Not find\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Find!&quot;</span>;</span><br><span class="line"><span class="comment">// input : 5 , output : Find!</span></span><br><span class="line"><span class="comment">// input : 6 , output : Not Find</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序(升序 由小到大)</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>(v, v+v.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序(降序 由大到小)</span></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">rbegin</span>(), v.<span class="built_in">rend</span>());</span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(),<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反轉</span></span><br><span class="line"><span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分搜</span></span><br><span class="line"><span class="built_in">binary_search</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), val)</span><br><span class="line"><span class="built_in">upper_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), val);</span><br><span class="line"><span class="built_in">lower_bound</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合併</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1 = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;,</span><br><span class="line">            v2 = &#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>&#125;,</span><br><span class="line">            <span class="built_in">v3</span>(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">merge</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v3.<span class="built_in">begin</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : v3) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">// output : 1 2 3 4 5 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全排列</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">next_permutation</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>())) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : v) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : </span></span><br><span class="line"><span class="comment">// 1 5 3 </span></span><br><span class="line"><span class="comment">// 3 1 5 </span></span><br><span class="line"><span class="comment">// 3 5 1 </span></span><br><span class="line"><span class="comment">// 5 1 3 </span></span><br><span class="line"><span class="comment">// 5 3 1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>vector</code> <strong>不支援</strong>對<strong>前端元素</strong>使用 <code>新增</code> 或 <code>刪除</code> 的操作</p></blockquote><h3 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h3><blockquote><p><code>push_back()</code> 與 <code>emplace_back()</code> 功能相同，但如果以效能為優先，<code>emplace_back()</code> 通常比 <code>push_back()</code> 更快一點，因為是直接呼叫 constructor 不會複製 object，所以有時候執行效率會比較快。<br><a href="https://www.codingninjas.com/studio/library/vector-push_back-vs-emplace_back">延伸閱讀：codingninjas - emplace_back() vs push_back() in C++ Vectors</a></p><p>在知道需要多少元素後，可以先對 <code>vector</code> 做 <code>reserve()</code> 擴充 <code>capacity</code> 再 <code>emplece_back()</code> ，會比 <code>空 vector</code> 慢慢 <code>emplece_back()</code> 快<br><a href="https://arc.net/l/quote/tslhdeoj">延伸閱讀：ping 不見路 - STL vector 效率小記</a><br>示意圖 (<a href="https://blog.csdn.net/JACKSONMHLK/article/details/114396650">圖片來源</a>)<br><img src="https://hackmd.io/_uploads/H1CgPoTva.png" alt="vector 示意圖"></p></blockquote><h2 id="string-字串"><a href="#string-字串" class="headerlink" title="string 字串"></a>string 字串</h2><p>由<strong>連續的字元</strong>組成，用法很像 <code>vector&lt;char&gt;</code>，非常方便</p><h3 id="可支援的操作方法-1"><a href="#可支援的操作方法-1" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><p><code>vector</code> 有的 <code>string</code> 幾乎都有</p><h3 id="常用基本操作-Code-1"><a href="#常用基本操作-Code-1" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">string s;    <span class="comment">// 預設為空字串</span></span><br><span class="line">string s1 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 賦值</span></span><br><span class="line">cin &gt;&gt; s;        <span class="comment">// 以空白作為輸入分隔</span></span><br><span class="line"><span class="built_in">getline</span>(cin,s);  <span class="comment">// 以換行作為輸入分隔</span></span><br><span class="line">s = <span class="string">&quot;ShiYu&quot;</span>;</span><br><span class="line">s = s1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 串接</span></span><br><span class="line">s = <span class="string">&quot;ShiYu&quot;</span>;</span><br><span class="line">s1 = <span class="string">&quot;ABC&quot;</span>;</span><br><span class="line">s += s1;</span><br><span class="line">cout &lt;&lt; s;</span><br><span class="line"><span class="comment">// output : ShiYuABC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除最後一個字元</span></span><br><span class="line">s.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讀取</span></span><br><span class="line">cout &lt;&lt; s[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// output : Y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 擷取子字串</span></span><br><span class="line">cout &lt;&lt; s.<span class="built_in">substr</span>(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// output : Shi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得長度</span></span><br><span class="line">cout &lt;&lt; s1.<span class="built_in">size</span>();</span><br><span class="line"><span class="comment">// output : 5</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：取得字串長度請不要用 <code>strlen()</code>，應該要用 <code>size()</code>，因為前者複雜度為 <code>O(n)</code>，後者為 <code>O(1)</code></p></blockquote><h2 id="pair-數對"><a href="#pair-數對" class="headerlink" title="pair 數對"></a>pair 數對</h2><p><strong>可將兩個型態的資料合併</strong>，透過成員 <code>first</code> 和 <code>second</code> 來存取元素，<code>pair</code> 也可以<strong>元素字典序</strong>來比較或排序，以 <code>first</code> 為優先</p><h3 id="常用基本操作-Code-2"><a href="#常用基本操作-Code-2" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">double</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 賦值</span></span><br><span class="line">p = &#123;<span class="number">1</span>, <span class="number">2.5</span>&#125;;</span><br><span class="line">p = <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">2.5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line"><span class="type">int</span> f = p.<span class="built_in">first</span>();    <span class="comment">// 1</span></span><br><span class="line"><span class="type">double</span> s = s.<span class="built_in">second</span>();<span class="comment">// 2.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比較</span></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">double</span>&gt; a, b;</span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2.5</span>&#125;;</span><br><span class="line">b = &#123;<span class="number">1</span>, <span class="number">2.6</span>&#125;;</span><br><span class="line">cout &lt;&lt; (a &lt; b) &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line"><span class="comment">// output : 1 (true)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交換兩 pair</span></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; a,b;</span><br><span class="line">a = &#123;<span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line">b = &#123;<span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">swap</span>(a, b); <span class="comment">// or a.swap(b)</span></span><br><span class="line">cout &lt;&lt; a.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a.second &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line"><span class="comment">// output : 2 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pair 搭配 vector 新增元素</span></span><br><span class="line">vector&lt; pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; vp;</span><br><span class="line">vp.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">vp.<span class="built_in">emplace_back</span>(<span class="number">3</span>,<span class="number">4</span>); <span class="comment">// 用 emplace_back 可以不用 make_pair</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : vp) &#123;</span><br><span class="line">    cout &lt;&lt; i.first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i.second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : </span></span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 vector 排序多個 pair</span></span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a = &#123;<span class="number">1</span>,<span class="number">3</span>&#125;,</span><br><span class="line">              b = &#123;<span class="number">2</span>,<span class="number">4</span>&#125;,</span><br><span class="line">              c = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">vector&lt; pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; v&#123;a, b, c&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : v) &#123;</span><br><span class="line">    cout &lt;&lt; v[i].first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; v[i].second &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : </span></span><br><span class="line"><span class="comment">// 1 2</span></span><br><span class="line"><span class="comment">// 1 3</span></span><br><span class="line"><span class="comment">// 2 4</span></span><br></pre></td></tr></table></figure><h2 id="tuple-數組"><a href="#tuple-數組" class="headerlink" title="tuple 數組"></a>tuple 數組</h2><p>與 <code>pair</code> 相似，但可以<strong>同時組合多個不同型別的元素</strong>( <code>pair</code> 只能 2 個)</p><h3 id="常用基本操作-Code-3"><a href="#常用基本操作-Code-3" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">tuple&lt;string, <span class="type">int</span>, <span class="type">bool</span>&gt; tp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function">tuple&lt;string, <span class="type">int</span>, <span class="type">bool</span>&gt; <span class="title">tp</span><span class="params">(<span class="string">&quot;ShiYu&quot;</span>, <span class="number">16</span>, <span class="literal">true</span>)</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 賦值</span></span><br><span class="line">tp = &#123;<span class="string">&quot;ShiYu&quot;</span>, <span class="number">16</span>, <span class="literal">true</span>&#125;;</span><br><span class="line">tp = <span class="built_in">make_tuple</span>(<span class="string">&quot;ShiYu&quot;</span>, <span class="number">16</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">tie</span>(<span class="string">&quot;ShiYu&quot;</span>, <span class="number">16</span>, <span class="literal">true</span>) = tp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line"><span class="type">int</span> age = <span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(tp); <span class="comment">// 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改值</span></span><br><span class="line"><span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(tp) = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取得元素個數</span></span><br><span class="line">cout &lt;&lt; tuple_size&lt;<span class="keyword">decltype</span>(tp)&gt;::value &lt;&lt; <span class="string">&quot;\n&quot;</span>; </span><br><span class="line"><span class="comment">// output : 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple 搭配 vector 新增元素</span></span><br><span class="line">vector&lt; tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; &gt; vt;</span><br><span class="line">vt.<span class="built_in">push_back</span>(<span class="built_in">make_tuple</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">vt.<span class="built_in">emplace_back</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>); <span class="comment">// 用 emplace_back 可以不用 make_tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>&amp; [a,b,c] : s) &#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; c &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : </span></span><br><span class="line"><span class="comment">// 1 2 3</span></span><br><span class="line"><span class="comment">// 4 5 6</span></span><br></pre></td></tr></table></figure><h2 id="stack-堆疊"><a href="#stack-堆疊" class="headerlink" title="stack 堆疊"></a>stack 堆疊</h2><p>可以想像成<strong>一疊書本</strong>，每次只能在<strong>最上面</strong> <code>放置</code> 或 <code>拿走</code> 一本書<br>有著 <code>後進先出 Last In First Out</code> 的規則<br>預設以 <code>Deque</code> 為基底的 <code>容器適配器 Container Adaptors</code></p><h3 id="可支援的操作方法-2"><a href="#可支援的操作方法-2" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>s.size()</td><td>取得 s 大小</td></tr><tr><td>s.empty()</td><td>回傳 s 是否為空</td></tr><tr><td>s.top()</td><td>取得 s 頂端元素</td></tr><tr><td>s.push(val) / s.emplace(val)</td><td>將 val 放入 s 頂端</td></tr><tr><td>s.pop()</td><td>移除 s 頂端元素</td></tr></tbody></table></div><blockquote><p>複雜度皆為 <code>O(1)</code></p></blockquote><h3 id="示意圖"><a href="#示意圖" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/S1U5nn0wT.png" alt="stack 示意圖"></p><p>(<a href="https://www.programiz.com/dsa/stack">圖片來源</a>)</p><h3 id="常用基本操作-Code-4"><a href="#常用基本操作-Code-4" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><p>依照示意圖實作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;++i) &#123;</span><br><span class="line">    stk.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!stk.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; stk.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    stk.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : </span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="常見應用"><a href="#常見應用" class="headerlink" title="常見應用"></a>常見應用</h3><p>維護<strong>單調序列</strong></p><h2 id="queue-佇列"><a href="#queue-佇列" class="headerlink" title="queue 佇列"></a>queue 佇列</h2><p>可以想像為<strong>排隊的人群</strong>，有可能是新的一個人來排在隊伍的尾端，或是最前面一個人結完帳離開隊伍<br>有著 <code>先進先出 First In First Out</code> 的規則</p><h3 id="可支援的操作方法-3"><a href="#可支援的操作方法-3" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>q.size()</td><td>取得 q 長度</td></tr><tr><td>q.empty()</td><td>回傳 q 是否為空</td></tr><tr><td>q.front()</td><td>取得 q 最前端(第一個加入的)元素</td></tr><tr><td>q.back()</td><td>取得 q 最尾端(最後加入的)元素</td></tr><tr><td>q.push(val) / q.emplace(val)</td><td>將 val 加入  q 尾端</td></tr><tr><td>q.pop()</td><td>移除 q 最前端元素</td></tr></tbody></table></div><blockquote><p>複雜度皆為 <code>O(1)</code></p></blockquote><h3 id="示意圖-1"><a href="#示意圖-1" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/HytPb6RDp.png" alt="queue 示意圖"></p><p>(<a href="https://www.boardinfinity.com/blog/working-of-queue-using-stl">圖片來源</a>)</p><h3 id="常用基本操作-Code-5"><a href="#常用基本操作-Code-5" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">q.<span class="built_in">emplace</span>(<span class="number">1</span>);</span><br><span class="line">q.<span class="built_in">emplace</span>(<span class="number">2</span>);</span><br><span class="line">q.<span class="built_in">emplace</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    cout &lt;&lt; q.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; q.<span class="built_in">back</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output : </span></span><br><span class="line"><span class="comment">// 3 1 3</span></span><br><span class="line"><span class="comment">// 2 2 3</span></span><br><span class="line"><span class="comment">// 1 3 3</span></span><br></pre></td></tr></table></figure><h3 id="常見應用-1"><a href="#常見應用-1" class="headerlink" title="常見應用"></a>常見應用</h3><p>圖論中的 <strong>BFS</strong></p><h2 id="deque-雙端佇列"><a href="#deque-雙端佇列" class="headerlink" title="deque 雙端佇列"></a>deque 雙端佇列</h2><p>為 <code>double ended queue</code> 的縮寫，一般的 <code>queue</code> 只能從尾端加入元素、從前端移除元素，而 <code>deque</code> 的<strong>前後都可以使用加入和移除的操作</strong>，基本上就是多了 <code>emplace_front()</code>、<code>pop_front()</code> 的 <code>vector</code>，雖然方便但由於<strong>常數較大</strong>，必賽中非必要不會去使用</p><h3 id="示意圖-2"><a href="#示意圖-2" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/SkmEUT0v6.png" alt="deque 示意圖"></p><p>(<a href="https://www.codingninjas.com/studio/library/difference-between-queue-and-deque-in-c">圖片來源</a>)</p><h3 id="可支援的操作方法-4"><a href="#可支援的操作方法-4" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><p>vector 有的 deque 幾乎都有</p><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>dq.push_front(val) / dq.emplace_front(val)</td><td>將 val 加入  dq 前端</td></tr><tr><td>dq.push_back(val) / dq.emplace_back(val)</td><td>將 val 加入  dq 尾端</td></tr><tr><td>dq.pop_front()</td><td>移除 dq 最前端元素</td></tr><tr><td>dq.pop_back()</td><td>移除 dq 最尾端元素</td></tr></tbody></table></div><blockquote><p>複雜度皆為 <code>O(1)</code></p></blockquote><h3 id="常用基本操作-Code-6"><a href="#常用基本操作-Code-6" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt; dq;</span><br><span class="line">dq.<span class="built_in">emplace_front</span>(<span class="number">1</span>);</span><br><span class="line">dq.<span class="built_in">emplace_back</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : dq) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">dq.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : dq) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">dq.<span class="built_in">pop_back</span>();</span><br><span class="line">cout &lt;&lt; dq.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment">// output : </span></span><br><span class="line"><span class="comment">// 1 2 </span></span><br><span class="line"><span class="comment">// 2 </span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h2 id="priority-queue-優先佇列"><a href="#priority-queue-優先佇列" class="headerlink" title="priority_queue 優先佇列"></a>priority_queue 優先佇列</h2><p><code>priority_queue</code> 利用幾個內建函式實現 <code>堆積 heap</code> 結構，它可以維持最頂端的元素永遠是最大或最小的，所以可以很方便<strong>快速的存取極值</strong></p><h3 id="示意圖-3"><a href="#示意圖-3" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/rJqPcT0PT.png" alt="priority queue 示意圖"></p><p>(<a href="https://www.programiz.com/dsa/priority-queue">圖片來源</a>)</p><h3 id="可支援的操作方法-5"><a href="#可支援的操作方法-5" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>pq.size(),pq.empty()</td><td>同 vector，複雜度 O(1)</td></tr><tr><td>pq.top()</td><td>回傳 pq 中最大或最小的元素，複雜度 O(1)</td></tr><tr><td>pq.push(val) / pq.emplace(val)</td><td>將 val 加入 pq 中，複雜度 O(log n)</td></tr><tr><td>pq.pop()</td><td>將 pq 中最大或最小的元素移除，複雜度 O(log n)</td></tr></tbody></table></div><h3 id="常用基本操作-Code-7"><a href="#常用基本操作-Code-7" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">3</span>);</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">5</span>);</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">9</span>);</span><br><span class="line">cout &lt;&lt; pq.<span class="built_in">top</span>();</span><br><span class="line"><span class="comment">// output : 9</span></span><br><span class="line"></span><br><span class="line">priority_queue&lt; <span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; pq;</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">3</span>);</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">5</span>);</span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">9</span>);</span><br><span class="line">cout &lt;&lt; pq.<span class="built_in">top</span>();</span><br><span class="line"><span class="comment">// output : 3</span></span><br></pre></td></tr></table></figure><h3 id="補充-1"><a href="#補充-1" class="headerlink" title="補充"></a>補充</h3><blockquote><p><code>priority_queue</code> 有三個型別參數 <code>T</code>、<code>C</code>、<code>Cmp</code><br><code>T</code> 是<strong>內容物的型別</strong>，<code>C</code> 是<strong>所採用的容器</strong>，<code>Cmp</code> 是<strong>比大小的依據</strong><br><code>priority_queue</code> 能使用的容器有 <code>vector</code> 和 <code>deque</code><br><code>Cmp</code> 的預設值是 <code>less&lt;T&gt;</code>，此時的 <code>priority_queue</code> 是<strong>最大堆 max heap</strong><br>若改成 <code>greater&lt;T&gt;</code>，則 <code>priority_queue</code> 為 <strong>最小堆 min heap</strong><br>建構式如上方 Code 第 8 行，而 output 為最小值</p></blockquote><h3 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h3><ul><li><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E6%90%9E%E6%87%82-binary-heap-%E7%9A%84%E6%8E%92%E5%BA%8F%E5%8E%9F%E7%90%86-96768ea30d3f">Binary Heap 的排序原理</a></li><li><a href="https://arc.net/l/quote/asrwfvnj">資料結構大便當： Binary Heap</a></li></ul><h2 id="set-集合"><a href="#set-集合" class="headerlink" title="set 集合"></a>set 集合</h2><p><code>set</code> 實現了 <code>紅黑樹(二元平衡樹) RB tree</code>，也就是說可以用 <code>O(log n)</code> 的複雜度<strong>插入</strong>、<strong>刪除</strong>或<strong>查詢</strong>一個值是否在其中</p><p><strong>內部自動有序</strong>且與數學的集合概念一樣<strong>不含重複元素</strong>，具有很方便地<strong>去重</strong>功能，且通常會稱元素的值為 <code>鍵值 Key</code></p><h3 id="示意圖-4"><a href="#示意圖-4" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/SyYmoACPT.png" alt="image"></p><p>(<a href="http://www.ccplusplus.com/2014/01/std-set-example-c.html">圖片來源</a>)</p><h3 id="可支援的操作方法-6"><a href="#可支援的操作方法-6" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>s.size() / s.empty()</td><td>同 vector</td></tr><tr><td>s.insert(K)</td><td>在 s 中放入一個鍵值為 k 的元素，若本來就有，則什麼事都不會做，複雜度 O(log n)</td></tr><tr><td>s.erase(K)</td><td>刪除鍵值為 k 的元素，並回傳刪除的個數。複雜度 O(log n)</td></tr><tr><td>s.erase(it first,it last)</td><td>刪除 [first,last)，若沒有指定 last 則只刪除 first，複雜度與刪除的個數呈線性</td></tr><tr><td>s.find(K)</td><td>回傳指向鍵值為 k 的迭代器，若 k 值不存在，則回傳 s.end()。複雜度 O(log n)</td></tr><tr><td>s.count(K)</td><td>回傳有幾個鍵值為 k 的元素，複雜度 O(log n)</td></tr><tr><td>s.lower_bound(K)</td><td>回傳迭代器指向第一個鍵值大於等於 k 的項。複雜度 O(log n)</td></tr><tr><td>s.upper_bound(K)</td><td>回傳迭代器指向第一個鍵值大於 k 的項。複雜度 O(log n)</td></tr></tbody></table></div><h3 id="常用基本操作-Code-8"><a href="#常用基本操作-Code-8" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 刪除</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">erase</span>(s.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳該元素的 iterator，若 set 內部無該元素，則回傳 end()</span></span><br><span class="line">s.<span class="built_in">find</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 問一個元素在不在 set 裡。可透過 find 的 return 值，或使用 s.count</span></span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">find</span>(<span class="number">10</span>) != s.<span class="built_in">end</span>()) cout &lt;&lt; <span class="string">&quot;In!\n&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">count</span>(<span class="number">10</span>)) cout &lt;&lt; <span class="string">&quot;In!\n&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="延伸閱讀-1"><a href="#延伸閱讀-1" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h3><ul><li><a href="https://ithelp.ithome.com.tw/m/articles/10333136">資料結構 — 紅黑樹(Red-Black Tree)</a></li><li><a href="https://hackmd.io/@_01X9rimQmWH33Djf8QhoA/Bkm3enQ8N">Shengyuu - 紅黑樹 - HackMD</a></li><li><a href="https://www.youtube.com/watch?v=Ij8-xX3PreE">hwdong - 最好懂的红黑树教程 - Youtube</a><img src="https://hackmd.io/_uploads/rk4_5RRw6.png" alt="紅黑樹 示意圖"></li></ul><h2 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h2><p>類似於 python 中的 <code>字典 dict</code>，內部為 <code>鍵值對 key-value</code>，所以 <code>map</code> 中每一個元素其實是 <code>pair</code>，可以修改 <code>value</code> 值，但不能修改 <code>key</code> 值<br><code>map</code> 可以用 <code>O(log n)</code> 的複雜度<strong>插入</strong>、<strong>刪除</strong>或<strong>查詢</strong>一個鍵值對應的值</p><h3 id="示意圖-5"><a href="#示意圖-5" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/HkrI0A0Dp.png" alt="image"></p><p>(<a href="https://www.mropengate.com/2015/12/cc-map-stl.html">圖片來源</a>)</p><h3 id="可支援的操作方法-7"><a href="#可支援的操作方法-7" class="headerlink" title="可支援的操作方法"></a>可支援的操作方法</h3><p><code>set</code> 有的 <code>map</code> 幾乎都有</p><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>m[k]</td><td>存取鍵值 k 對應的值，若 k 沒有對應的值，會插入一個元素，使 k 對應到預設值並回傳之，複雜度 O(log n)</td></tr><tr><td>m.insert(pair<K,T> k)</td><td>若沒有鍵值為 k.first 的值，插入一個鍵值為 k.first 的值對應到 k.second，並回傳一個 pair，first 是指向剛插入的元素的迭代器、second 是 true；若已經有了，回傳一個 pair，first 是指向鍵值為 k.first 的元素的迭代器，second 是 false。</td></tr></tbody></table></div><h2 id="multiset-多重集合-amp-multimap-多重映射"><a href="#multiset-多重集合-amp-multimap-多重映射" class="headerlink" title="multiset 多重集合 &amp; multimap 多重映射"></a>multiset 多重集合 &amp; multimap 多重映射</h2><p>兩者用法與 <code>set</code>、<code>map</code> 用法一樣，但<strong>允許有重複元素</strong>，且 <code>multimap</code> 中一個鍵值可能對應到不同的值，所以<strong>不支援下標</strong></p><h3 id="示意圖-6"><a href="#示意圖-6" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/SJrLqACwa.png" alt="multiset 示意圖"></p><p>(<a href="http://www.ccplusplus.com/2014/01/std-set-example-c.html">圖片來源</a>)</p><h2 id="unordered-set-無序集合-amp-unordered-map-無序映射"><a href="#unordered-set-無序集合-amp-unordered-map-無序映射" class="headerlink" title="unordered_set 無序集合 &amp; unordered_map 無序映射"></a>unordered_set 無序集合 &amp; unordered_map 無序映射</h2><p>兩者用法也與 <code>set</code>、<code>map</code> 用法一樣，但利用 <code>雜湊表 hash table</code> 實作，<strong>內部不排序</strong>，因為沒有排序，所以當然沒有 <code>lower_bound()</code>、<code>upper_bound()</code><br><strong>插入</strong>、<strong>搜尋</strong>都是 <code>O(1)</code>，但<strong>常數大</strong>，不常使用</p><h3 id="示意圖-7"><a href="#示意圖-7" class="headerlink" title="示意圖"></a>示意圖</h3><p><img src="https://hackmd.io/_uploads/Hy_gSk1uT.png" alt="image"></p><p>(<a href="https://conglang.github.io/2015/01/01/stl-unordered-container/">圖片來源</a>)</p><h3 id="延伸閱讀-2"><a href="#延伸閱讀-2" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h3><ul><li><a href="https://ithelp.ithome.com.tw/articles/10268077?sc=iThelpR">資料結構 - 雜湊表 Hash Table</a></li><li><a href="https://medium.com/@ralph-tech/%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-%E9%9B%9C%E6%B9%8A%E8%A1%A8-hash-table-15f490f8ede6">雜湊表（Hash Table）- 拉爾夫的技術隨筆</a><br>示意圖(<a href="https://conglang.github.io/2015/01/01/stl-unordered-container/">圖片來源</a>)<br><img src="https://hackmd.io/_uploads/Hk_j4ykda.png" alt="image"></li></ul><h2 id="unordered-multiset-無序多重集合-amp-unordered-multimap-無序多重映射"><a href="#unordered-multiset-無序多重集合-amp-unordered-multimap-無序多重映射" class="headerlink" title="unordered_multiset 無序多重集合 &amp; unordered_multimap 無序多重映射"></a>unordered_multiset 無序多重集合 &amp; unordered_multimap 無序多重映射</h2><p>依名稱即可知道為前兩者的結合，<strong>內部不排序且可允許重複元素</strong></p><h2 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h2><p>可以將 <code>bitset</code> 當成是一個<strong>效率很快的 bool 陣列</strong>，因為 <code>bool</code> 這個型別明明只能表示 <code>true</code> 或 <code>false</code>，但通常卻佔了 <code>1 byte</code> 的記憶體空間，用 <code>bitset</code> 可以<strong>宣告固定長度的 bits</strong>，可以想像為一堆 0 和 1 的陣列，並且 <code>bitset</code> 的<strong>位元運算</strong>是被優化過的，對常數優化及空間壓縮有不錯的效用，速度大約是 <strong>bool 的 32 倍</strong></p><h3 id="可支援的操作函數"><a href="#可支援的操作函數" class="headerlink" title="可支援的操作函數"></a>可支援的操作函數</h3><div class="table-container"><table><thead><tr><th>操作方法</th><th>功能介紹</th></tr></thead><tbody><tr><td>b[i]</td><td>存取第 i 位。複雜度 O(1)</td></tr><tr><td>b.count()</td><td>回傳 b 有幾個位元是 1。複雜度 O(N)</td></tr><tr><td>b.size()</td><td>回傳 b 有幾個位元。複雜度 O(1)</td></tr><tr><td>b.set()</td><td>將所有位元設為 1。複雜度 O(N)</td></tr><tr><td>b.reset()</td><td>將所有位元設為 0。複雜度 O(N)</td></tr><tr><td>b.flip()</td><td>將所有位元的 0、1 互換 (反白)。複雜度 O(N)</td></tr><tr><td>b.any() / b.none()</td><td>檢查 b 中全 0 的情況，若 b 全 0，any() 返回 false、b.none() 返回 true，若 b 至少有一個 1，則結果相反</td></tr><tr><td>b.to_string()</td><td>回傳一個字串和 b 的內容一樣。複雜度 O(N)</td></tr><tr><td>b.to_ulong()</td><td>回傳一個 unsigned long 和 b 的內容一樣 (在沒有溢位的範圍內)。複雜度 O(N)</td></tr></tbody></table></div><h3 id="常用基本操作-Code-9"><a href="#常用基本操作-Code-9" class="headerlink" title="常用基本操作 Code"></a>常用基本操作 Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">bitset&lt;5&gt; b; <span class="comment">// 大小為 5，初始值 00000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 賦值</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1</span>; <span class="comment">// 00001 以右邊為低位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 設置</span></span><br><span class="line">b.<span class="built_in">set</span>();<span class="comment">// 11111</span></span><br><span class="line">b.<span class="built_in">reset</span>();  <span class="comment">// 00000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 計數</span></span><br><span class="line">b.<span class="built_in">count</span>(); <span class="comment">// 計算 b 裡有幾個 1</span></span><br></pre></td></tr></table></figure><hr><h1 id="題單"><a href="#題單" class="headerlink" title="題單"></a>題單</h1><p><a href="https://shiyu0318.notion.site/C-STL-ShiYu-s-Blog-c2ed8c6b22fb4118bab30b62dbad5299?pvs=4">STL 題單連結 - Notion</a></p><blockquote><p>此篇頁面尚未編輯完畢 將會在日後陸續更新題單與 AC Code</p></blockquote><hr><h1 id="Outro"><a href="#Outro" class="headerlink" title="Outro"></a>Outro</h1><p>這篇文章只用了兩天的時間，從收集資料、整理資訊、規劃架構，再來開始寫每個資料結構的內容，製作表格、寫 Code、找圖片(每張圖片皆有附上來源)、找補充資料，到最後不斷地重複新增和修改內容，直到整篇文章逐漸完整，我從中學習到的不只有這篇文章所呈現的知識，還有很多重要的能力，也感受到了學習的快樂，日後會不斷地學習新知識，也會針對各主題寫成一篇筆記發佈，感謝大家的閱讀</p><p>預告：<br>C++ 進階資料結構實作（Advanced Data Dtructures）<br><a href="https://shiyu0318.github.io/post/Data-Structures-advanced/">文章連結</a></p><hr><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://www.geeksforgeeks.org/the-c-standard-template-library-stl/">The C++ Standard Template Library (STL)</a></li><li><a href="https://jasonblog.github.io/note/c++/stl_rong_qi_4e0029_-_ji_ben_jie_shao.html">STL 容器 (一) - 基本介紹 - Jason note</a></li><li><a href="https://emanlaicepsa.github.io/2020/11/30/0-16/">從零開始的演算法競賽入門教學 - STL</a></li><li><a href="https://hackmd.io/@konchin/BkGVGVd9I">Ian Shih - STL Containers - HackMD</a></li><li><a href="https://github.com/0voice/cpp_backend_awsome_blog/blob/main/%E3%80%90NO.19%E3%80%91C++%E4%B8%ADSTL%E7%94%A8%E6%B3%95%E8%B6%85%E8%AF%A6%E7%BB%86%E6%80%BB%E7%BB%93%EF%BC%88%E6%94%B6%E8%97%8F%E7%BA%A7%EF%BC%89.md">C++ 中 STL 用法超詳細總結 - Github</a></li><li><a href="https://hackmd.io/@Greenleaf/advanced_cpp">進階 C++ STL 迭代器 - HackMD</a></li><li><a href="https://blog.csdn.net/zygood_/article/details/122457444">C++ STL 常用容器以及操作簡介</a></li><li><a href="https://tw511.com/a/01/6897.html">C++標準模板庫容器的常見用法</a></li><li><a href="https://jasonblog.github.io/note/c++/c++_stl_xue_xi_zong_7d5028_quan_976229.html">C++ STL 學習總結(全面)</a></li><li><a href="https://youtube.com/playlist?list=PLk6CEY9XxSIA-xo3HRYC3M0Aitzdut7AA&amp;si=q5I7ppldSRGBKsKq">STL in C++ - Youtube</a></li><li><a href="https://cplusplus.com/reference/">cplusplus reference</a></li><li><a href="https://en.cppreference.com/w/">cppreference</a></li></ul><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 程式筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> bitset </tag>
            
            <tag> 資料結構 Data Structures </tag>
            
            <tag> 動態陣列 vector </tag>
            
            <tag> 字串 string </tag>
            
            <tag> 數對 pair </tag>
            
            <tag> 數組 tuple </tag>
            
            <tag> 堆疊 stack </tag>
            
            <tag> 佇列 queue </tag>
            
            <tag> 雙端佇列 deque </tag>
            
            <tag> 優先佇列 ptiority_queue </tag>
            
            <tag> 集合 set </tag>
            
            <tag> 映射 map </tag>
            
            <tag> 多重集合 multiset </tag>
            
            <tag> 多重映射 multimap </tag>
            
            <tag> 無序集合 unordered_set </tag>
            
            <tag> 無序映射 unordered_map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>資訊學科能力競賽 競賽過程 + 解題程式碼 + 心得</title>
      <link href="/SHIYU0318.github.io/post/NHSPC/"/>
      <url>/SHIYU0318.github.io/post/NHSPC/</url>
      
        <content type="html"><![CDATA[<h2 id="競賽資訊">競賽資訊</h2><ul><li>名稱：112 學年度學科能力競賽 複賽 資訊科</li><li>賽區：國教署負責區第四區（台南）</li><li>時間：2023/11/2</li><li>地點：台南女中</li><li>比賽人數：50 人（資訊科）</li><li>獲獎人數：1 ~ 5 名進全國賽 再大約取前三分之一的人獲得佳作</li><li>當天詳細時程：<br><img src="https://hackmd.io/_uploads/SyMM0IGXp.jpg" alt="IMG_3075.jpeg"></li></ul><h2 id="前言">前言</h2><p>這是我第一次比資訊學科能力競賽 高一時不知道在幹嘛 那時不太關注資訊比賽<br>南大附中好像也沒什麼人比過資訊能競 所以我跟 @Yudong 不用校內初選就直接進複賽了<br>南區去年只有選 3 名進全國賽 今年因為去年的南一中有人全國賽一等二等獎 所以新增了 2 個 總共有 5 個名額 <s>賽前猜測沒意外應該都是南一中的</s><br>我們第一次比賽就遇到主辦方各種出錯 這個留到文章最後再說<br>此篇文章就是寫我參加此競賽的過程、解題程式碼、心得、和檢討<br>如果你也是資訊選手或打競程的 那這篇其實可以滑掉不用看了<br>對你來說可能是一篇廢文 沒什麼參考價值</p><h2 id="上午場">上午場</h2><p>報到抽籤後 發現只有我們學校沒有領隊…<br>到了我們學校的座位 被排在最後一排<br>我跟 Yudong 在猜這座位配置是不是依照學校的得獎次數排的哈哈<br><img src="https://hackmd.io/_uploads/HkkafDMQp.jpg" alt="IMG_3133.jpeg"><br>我在活動中心其實滿緊張的 雖然前幾個禮拜也有參加比賽：CodeWars、金盾獎 但都是抱持著輕鬆愉快的心情比的<br>可能是因為這場能競對我來說算是滿重要的比賽 整個狀態有點緊繃<br>到了電腦教室測試時 主辦就開始出現錯誤了 我先跳過這部分最後再說<br>來寫一下解題過程</p><h3 id="p1">p1</h3><p>第 1 題明顯滿難的 我看到就先跳過了</p><h3 id="p2">p2</h3><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">有各不同的分數種類： 50 25 10 5 1 </span><br><span class="line">求總和為 N 分的組合數</span><br></pre></td></tr></table></figure><ul><li>Input</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">11</span><br><span class="line">26</span><br></pre></td></tr></table></figure><ul><li>Output</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">13</span><br></pre></td></tr></table></figure><ul><li>解題想法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 層 for 迴圈枚舉每種分數各取幾次</span><br><span class="line">因為取完 前幾種分數 剩餘的都可以用 1 分來湊</span><br><span class="line">看了數字範圍 確認此做法不會超時後開始寫 Code</span><br></pre></td></tr></table></figure><ul><li><span style="color:green">AC</span> Code</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShiYu ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOR(i,n) for(int i=0; i&lt;=n; ++i)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ShiYu;</span><br><span class="line">    <span class="type">int</span> t; cin &gt;&gt; t;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">FOR</span>(i, n / <span class="number">50</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">FOR</span>(j, (n - i*<span class="number">50</span>) / <span class="number">25</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">FOR</span>(k, (n - i*<span class="number">50</span> - j*<span class="number">25</span>) / <span class="number">10</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans += (n - i*<span class="number">50</span> - j*<span class="number">25</span> - k*<span class="number">10</span>) / <span class="number">5</span> + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="p3-疊蛋餅">p3 疊蛋餅</h3><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要疊 n 層圓形蛋餅 最底層的蛋餅半徑是 1</span><br><span class="line">每層的半徑都不能比下面整疊的最大半徑多出 1 以上</span><br><span class="line">求有幾種可能</span><br></pre></td></tr></table></figure><ul><li>解題想法</li></ul><p>一開始就先寫出 1 2 3 4 層的可能性<br>我用樹狀圖來畫出每層的可能性 然後試著尋找規律<br><img src="https://hackmd.io/_uploads/HyDkovMmT.png" alt="1 (1).png"><br>後來觀察出會有重複計算的地方<br><img src="https://hackmd.io/_uploads/SkiMswf76.png" alt="1 (2).png"><br>但就算這樣我還是不知道該如何用程式去計算出所有可能<br>因為有會重複計算到的數值 所以不能用暴力枚舉的方法 我猜應該是用動態規劃 DP 把算完的東西記下來 不過在賽中我沒有解出來<br>後來跟新化高中的 Eason 與 Silv 討論<br>他們也覺得這題很難讀懂題目意思</p><h3 id="p4-最大矩形面積">p4 最大矩形面積</h3><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">給一張大小為 n x m 且由 0 與 1 所組成的二維陣列</span><br><span class="line">1 是有種樹, 0 是沒樹</span><br><span class="line">求沒種樹的最大面積</span><br></pre></td></tr></table></figure><ul><li>Input</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6 7</span><br><span class="line">0010100</span><br><span class="line">0100001</span><br><span class="line">1010000</span><br><span class="line">1100001</span><br><span class="line">0010001</span><br><span class="line">0110101</span><br></pre></td></tr></table></figure><ul><li>Output</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><p>顯然是找出中間這塊算出面積就好<br><img src="https://hackmd.io/_uploads/HknXCvzQp.jpg" alt="IMG_3135.jpeg"><br>我在賽中不知道該如何用程式實作出來<br>聽 Silv 說這是 CSES 的經典題 用<strong>二維前綴和</strong>就能解出來了<br>但我學會的沒有很多而且練習的題目太少了 不知道能這樣做</p><h3 id="p5">p5</h3><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有人把一條方程式中的 + 與 * 寫反了</span><br><span class="line">所以給整數 a</span><br><span class="line">求有幾組整數 b , c </span><br><span class="line">能滿足 a + (b * c) = a * (b + c)</span><br><span class="line">若有無限解 則輸出 -1</span><br></pre></td></tr></table></figure><ul><li>解題想法<br>一看就是個數學題<br>我把式子移項後變成 b * c = a * (b + c -1)<br>腦中馬上想到了算幾不等式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac><mo>≥</mo><msqrt><mrow><mi>a</mi><mi>b</mi></mrow></msqrt></mrow><annotation encoding="application/x-tex">\frac{a+b}{2} \ge \sqrt{ab}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1078em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal">ab</span></span></span><span style="top:-2.8922em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1078em;"><span></span></span></span></span></span></span></span></span> 感覺解法會往這個方向走<br>但因為題目說可能會有無限解 所以我在賽中想不到如何判斷是否有無限解的方法就沒解出來了</li></ul><h3 id="p6-p7">p6 p7</h3><p>不在我能力範圍內 跳過</p><h3 id="p8">p8</h3><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">給 n 個整數</span><br><span class="line">若選擇了第 i 個整數 </span><br><span class="line">則 i+1 與 i-1 （前後兩數）都不能選</span><br><span class="line">求最大總和</span><br></pre></td></tr></table></figure><ul><li>解題想法<br>我原本用 Greedy 來做 每次都選最大的數字<br>後來發現如果第 i 個數字最大 我選了 i<br>但前後兩數加起來比 i 大我卻不能選 這樣就不是最大總和了<br>所以這題要用 DP 來做 聽說 CSES 也有這種題目<br>我真的練太紹題目了 連這種簡單經典題都寫不出來</li></ul><h3 id="p9">p9</h3><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有 n 人要分組</span><br><span class="line">給 i = 0 ~ n-1</span><br><span class="line">ai 為 i 的組員</span><br><span class="line">求每組成員及組數</span><br></pre></td></tr></table></figure><ul><li>Input</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">2 4 3 5 1 0</span><br></pre></td></tr></table></figure><p>把輸入做成表格</p><table><thead><tr><th style="text-align:center">人的編號</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td style="text-align:center">他的組員的編號</td><td>2</td><td>4</td><td>3</td><td>5</td><td>1</td><td>0</td></tr></tbody></table><ul><li>Output</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 2 3 5</span><br><span class="line">1 4</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>把輸出做成表格</p><table><thead><tr><th>組別</th><th>組員</th></tr></thead><tbody><tr><td>第一組</td><td>0 2 3 5</td></tr><tr><td>第二組</td><td>1 4</td></tr></tbody></table><ul><li><p>解題想法<br><s>來自 SCIST 總召 Fishhh 的梗</s><br><img src="https://hackmd.io/_uploads/r1noZXbma.png" alt="image.png"></p></li><li><p><span style="color:green">AC</span> Code</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShiYu ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOR(i,n) for(int i=0; i&lt;n; ++i)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ShiYu;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a[n]; <span class="built_in">FOR</span>(i,n) cin &gt;&gt; a[i];</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; v;</span><br><span class="line">    <span class="built_in">FOR</span>(i,n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; t;</span><br><span class="line">        t.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="type">int</span> next = a[i], b = i;</span><br><span class="line">        <span class="keyword">while</span>(a[next] != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t.<span class="built_in">push_back</span>(next);</span><br><span class="line">            a[b] = <span class="number">-1</span>;</span><br><span class="line">            b = next;</span><br><span class="line">            next = a[next];</span><br><span class="line">        &#125;</span><br><span class="line">        a[b] = <span class="number">-1</span>;</span><br><span class="line">        v.<span class="built_in">push_back</span>(t);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FOR</span>(i,v.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">FOR</span>(j,v[i].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; v[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; v.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="下午場-2-小時-span-style-color-green-2-span-6">下午場 2 小時 <span style="color:green">2</span> / 6</h2><h3 id="p1-2">p1</h3><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每天有 10 小時可以用</span><br><span class="line">給很多組活動的 起始時間 與 結束時間</span><br><span class="line">求如何安排才能在 10 小時中舉辦最多活動</span><br></pre></td></tr></table></figure><p>這題感覺很簡單不過一樣的我也沒有寫過類似的題目所以跳過<br>後來聽 Silv 說只要過濾較多時間的活動<br>然後依結束時間排序活動 再依開始時間挑選活動就可以了</p><h3 id="p2-2">p2</h3><p>我把下午的比賽時間都砸在這題上了</p><ul><li>題意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">給 n 間糖果店</span><br><span class="line">每間不同的店花 1 塊錢可以買到不同的 a 顆糖果</span><br><span class="line">且每間店都會額外贈送 b 顆糖果</span><br><span class="line">有 q 筆操作</span><br><span class="line">分為兩類</span><br><span class="line">1. 把第 x 間店 移動到 第 y 個位置</span><br><span class="line">2. 詢問在 L 與 R 間店中 可以選擇「一間」買糖果 有 x 塊錢可以買 求糖果最大值</span><br></pre></td></tr></table></figure><ul><li>Input</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">2 2</span><br><span class="line">4 5</span><br><span class="line">1 3</span><br><span class="line">3 6</span><br><span class="line">1 7</span><br><span class="line">3</span><br><span class="line">2 2 3 3</span><br><span class="line">1 2 4</span><br><span class="line">2 2 3 3</span><br></pre></td></tr></table></figure><ul><li>Output</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">15</span><br></pre></td></tr></table></figure><ul><li><span style="color:green">AC</span> Code</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShiYu ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOR(i,n) for(int i=0; i&lt;n; ++i)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> vpii vector<span class="string">&lt;pair&lt;int,int&gt;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ShiYu;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    vpii v;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q; cin &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            vpii vt;</span><br><span class="line">            pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; p;</span><br><span class="line">            <span class="built_in">FOR</span>(i,v.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i + <span class="number">1</span> == x)</span><br><span class="line">                &#123;</span><br><span class="line">                    p = v[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == y)</span><br><span class="line">                &#123;</span><br><span class="line">                    vt.<span class="built_in">push_back</span>(p);</span><br><span class="line">                &#125;</span><br><span class="line">                vt.<span class="built_in">push_back</span>(v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            v = vt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r, x; cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            <span class="type">int</span> maxn = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=l<span class="number">-1</span>; i&lt;r; ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> sum = v[i].first * x + v[i].second;</span><br><span class="line">                <span class="keyword">if</span>(sum &gt; maxn) maxn = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; maxn &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一開始以為第 1 種操作是交換兩間店的位置<br>後來才知道是把第 x 間店抽掉後 插入到 第 y 個位置 其餘的順延補上<br>但寫完還是錯 因為後來這題題目在賽中被主辦方改過題目意思<br>害我原本照著原題目意思寫的程式碼都要改掉<br>上面的版本是已經重新寫過而且在最後幾分鐘通過的<br>原版意思是可以去「任何」糖果店買糖果 後來才改成只能去「一間」買<br>這個題目意思改動浪費了我超級多時間修改程式碼＝＝<br>原版程式碼多用了 bool 記錄每間糖果店有沒有去買過<br>因為我太笨了不太會用 tuple<br>所以用了很毒的 <code>vector&lt; pair&lt; pair&lt;int,int&gt;,bool &gt; &gt;</code><br>也判斷了每塊硬幣要去哪間糖果店買才會得到最多糖果<br>寫完比上面的程式碼還要多了整整 20 行<br>原版 Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShiYu ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOR(i,n) for(int i=0; i&lt;n; ++i)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ShiYu;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    vector&lt;pair&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">bool</span>&gt; &gt; v;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        v.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(a,b),<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> q; cin &gt;&gt; q;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; t;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> x, y; cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">            vector&lt;pair&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">bool</span>&gt; &gt; vt;</span><br><span class="line">            pair&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,<span class="type">bool</span>&gt; p;</span><br><span class="line">            <span class="built_in">FOR</span>(i,v.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(i + <span class="number">1</span> == x)</span><br><span class="line">                &#123;</span><br><span class="line">                    p = v[i];</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(i == y)</span><br><span class="line">                &#123;</span><br><span class="line">                    vt.<span class="built_in">push_back</span>(p);</span><br><span class="line">                &#125;</span><br><span class="line">                vt.<span class="built_in">push_back</span>(v[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            v = vt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l, r, x; cin &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">            <span class="type">int</span> maxn = <span class="number">-1</span>,now=<span class="number">-1</span>,sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(x--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=l<span class="number">-1</span>; i&lt;r; ++i)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(v[i].second == <span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(v[i].first.first + v[i].first.second &gt; maxn)</span><br><span class="line">                        &#123;</span><br><span class="line">                            maxn = v[i].first.first + v[i].first.second;</span><br><span class="line">                            now = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(v[i].second == <span class="literal">false</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(v[i].first.first &gt; maxn)</span><br><span class="line">                        &#123;</span><br><span class="line">                            maxn = v[i].first.first;</span><br><span class="line">                            now = i;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sum += maxn;</span><br><span class="line">                v[now].second = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="p3-p5">p3 ~ p5</h3><p>由於花太多時間在 p2 了 根本來不及想這 3 題要怎麼做</p><h3 id="p6">p6</h3><ul><li>題意<br><s>這題題目超長 花了一整頁的文字在介紹 2 進制如何進位  根本素養題 所以我直接濃縮成兩句話</s></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">給 a b 兩正整數</span><br><span class="line">求相乘後的 2 進制與 10 進制</span><br></pre></td></tr></table></figure><ul><li>Input</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">31</span><br><span class="line">26</span><br></pre></td></tr></table></figure><ul><li>Output</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1100100110</span><br><span class="line">806</span><br></pre></td></tr></table></figure><ul><li>解題想法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">先直接 a * b 求 10 進位後用字串的方法換成 2 進位</span><br><span class="line">這題 Eason 用位元左移右移來做 但我太笨了不會那種方法</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ShiYu ios::sync_with_stdio(0),cin.tie(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FOR(i,n) for(int i=0; i&lt;n; ++i)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ShiYu;</span><br><span class="line">    <span class="type">int</span> a, b; cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="type">int</span> n = a * b, t = n;</span><br><span class="line">    string s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(t != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t % <span class="number">2</span>) s = <span class="string">&quot;1&quot;</span> + s;</span><br><span class="line">        <span class="keyword">else</span> s = <span class="string">&quot;0&quot;</span> + s;</span><br><span class="line">        t /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; s &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><details class="toggle" ><summary class="toggle-button" style="">抱怨區 可跳過或忽視</summary><div class="toggle-content"><p>這裡詳細講一下主辦方這次競賽發生的一堆錯誤</p><ol><li>賽前測試沒有把系統用好 導致大家上傳測試題的程式碼時都發生 SE（系統錯誤）主辦卻說這不影響正式比賽 延誤了很久才開始</li><li>正式開始之後 評測系統又掛掉了 大家都沒辦法登進去提交程式碼 於是主辦就開始做起超荒謬的事：人工評測 我當下是超級傻眼 <s>都 2023 年了還在人工 Judge</s></li><li>人工評測只是叫你執行程式然後輸入範例測資看有沒有跟範例輸出一樣 然後簡單看了一下程式碼就直接算你通過 我認為這喪失了公平性因為人工評測是直接用範例測資來看輸出是否正確 但正常比賽用的線上評測是由很多筆測試資料測試你的程式碼是否通過 如果用人工評測範例測資輸出正確 但程式碼錯誤 卻沒被檢查到呢？</li><li>在系統正常後 我提交了剛剛人工評測通過的題目程式碼看看是否在評測平台也能通過 雖然成功通過 但主辦方過了一陣子才出來說：人工評測通過的人不用傳線上評測 又說上傳的話會影響原本人工評測時紀錄的時間 我都已經在平台正常的那刻上傳通過了之後才說不用傳＝＝ 而且重點是不傳怎麼知道程式碼通過或不通過？那如果有人人工評測正確但程式碼錯誤卻又不用上傳線上評測 是不是就多賺別人一題？</li><li>主辦出題感覺真的很不用心 不知道有沒有認真審題 題目很多數字都沒給範圍 然後很多題都需要在賽中出來大聲講解補充題目意思 很多題都是在比賽時改了又改 還有重新拿一張題目給我們的 一堆題目連範例側資都是錯的 還叫我們整個打叉不要看 然後我都已經照著原版題目意思寫完程式碼了 才出來把題目意思改掉讓我重新修改程式碼</li></ol></div></details><hr><h2 id="心得-檢討">心得+檢討</h2><p>這次比賽總共 15 題 我只解出 4 題<br>有很多都是出自 CSES 的簡單經典題<br>而我卻因為練太少題目 都想不出解法<br>這場比賽集結了很多電神 整個比賽會場都充滿著高壓電<br>全場最強第一名的自學生趙翊佑（聽說是陳水扁的孫子）<br>還有前幾名有進全國賽的郭育愷、葉智揚、陳秉宏、鄭柏軒 都南一中的 還有一個沒聽過<br>還有因為 SCIST 而認識新化高中的 Eason 跟 Silv 他們都有得佳作<br>我看到些人就會覺得我自己超級弱<br>我本身實力與其他選手相比實在差太多了<br>最後雖然跟 silv 一樣都是解出 4 題 但他有佳作我卻沒有<br>我認為可能真的是被主辦方說的上傳線上評測的時間影響到成績<br>或是他有解到第一題會多一分 或是我最後花的時間確實比較多<br>心裡其實滿沮喪的 一直在想為什麼會這樣 也一直很想抱怨主辦方<br>但又覺得我實力比不上別人 好像也沒什麼資格抱怨的<br>總而言之 見識到有那麼多人都比我更厲害而且比我更努力<br>我覺得讓我想向他們學習 我會多多練題 持續精進自己</p><hr><h2 id="11-3-更新-我得佳作了？！">11/3 更新 我得佳作了？！</h2><p>廢話不多說 直接附上得獎名單<br><img src="https://hackmd.io/_uploads/Hkmanuf76.jpg" alt="IMG_3129.jpeg"><br>明明現場沒喊到我的名字<br>今天公布的得獎名單裡佳作竟然有我？？？<br>心中滿滿問號與懷疑<br>不過後來猜測是因為主辦方重新整理過分數與解題時間<br>調整了名次 讓我成功獲得佳作<br>心情慢慢轉變為喜悅<br>我把這次的成績視為對自己的一種肯定<br>作為我之後的動力</p><p>高二的一堆比賽 讓我心裡也不知道該怎麼平衡課業與競賽<br>一直在擔心如果把時間花在比賽 卻沒有比出成績的話怎麼辦<br>我的段考分數也因為社團與競賽 相比高一真的變差太多了<br>身邊的同學也一直在問為什麼我成績變得不好<br>但我真的無法解釋 只能做好我該做的事 做我想做的事<br>希望我能漸漸學會如何分配我自己的時間 慢慢調整課業與競賽的比重<br>我相信我能越來越好的</p><h2 id="特別感謝">特別感謝</h2><p>Yudong 每次比賽的搭檔 沒有你我也不會有佳作 感謝你常常陪我打線上程式競賽到半夜 每天討論程式題目怎麼解 讓我們一起進步 雖然這次你比賽你打的不太理想 不過我相信你的實力是有的 不要太在意 明年我們再拼一次 最後也謝謝賽前給我加油打氣的老師與同學朋友們</p><h2 id="延伸閱讀">延伸閱讀</h2><p><a href="https://hackmd.io/@YuDong/NHSPC112">Yudong 的心得</a><br><a href="https://hackmd.io/@tw20000807/2023south_contest">台南一中 葉智揚 競賽心得</a></p><hr><h1><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 心得 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 資訊競賽 </tag>
            
            <tag> 競程 </tag>
            
            <tag> 題解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南大附中 資訊研究社 創社計畫</title>
      <link href="/SHIYU0318.github.io/post/NFIRC/"/>
      <url>/SHIYU0318.github.io/post/NFIRC/</url>
      
        <content type="html"><![CDATA[<h1 id="創社計畫"><a href="#創社計畫" class="headerlink" title="創社計畫"></a><a href="https://hackmd.io/@YuDong/ashsnutn_csirc">創社計畫</a></h1><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 社團 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 南大附中 </tag>
            
            <tag> 資訊研究社 </tag>
            
            <tag> 第一屆 </tag>
            
            <tag> NFIRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序演算法 Sort Algorithm (C++)</title>
      <link href="/SHIYU0318.github.io/post/Sort-Algorithm/"/>
      <url>/SHIYU0318.github.io/post/Sort-Algorithm/</url>
      
        <content type="html"><![CDATA[<p>現今社會，資料量不斷地增加，因此排序演算法的重要性日益提升。</p><p>在現代計算機科學中，排序被廣泛應用在各種領域，如數據庫中的數據排序、搜索引擎中的搜索結果排序、編輯器中的代碼自動排序等等。</p><p>從大數據排序到網路搜尋引擎排序，排序演算法在我們日常生活中扮演了重要的角色。</p><p>本文將介紹10種常見的排序演算法，來和我一起學習掌握排序演算法的原理及實作過程吧！</p><hr><h1 id="本文架構"><a href="#本文架構" class="headerlink" title="本文架構"></a>本文架構</h1><h2 id="線性排序演算法種類"><a href="#線性排序演算法種類" class="headerlink" title="線性排序演算法種類"></a>線性排序演算法種類</h2><ol><li>氣泡排序（Bubble Sort）</li><li>選擇排序（Selection Sort）</li><li>插入排序（Insertion Sort）</li><li>快速排序（Quick Sort）</li><li>合併排序（Merge Sort）</li><li>堆排序（Heap Sort）</li><li>希爾排序（Shell Sort）</li><li>計數排序（Counting Sort）</li><li>桶排序（Bucket Sort）</li><li>基數排序（Radix Sort）</li></ol><h2 id="每個排序演算法的內容"><a href="#每個排序演算法的內容" class="headerlink" title="每個排序演算法的內容"></a>每個排序演算法的內容</h2><ul><li>排序介紹</li><li>動畫演示</li><li>實作步驟</li><li>C++程式碼</li><li>注意事項</li><li>時間＆空間複雜度</li><li>總結</li></ul><hr><h1 id="排序演算法的詳細介紹"><a href="#排序演算法的詳細介紹" class="headerlink" title="排序演算法的詳細介紹"></a>排序演算法的詳細介紹</h1><h2 id="氣泡排序（Bubble-Sort）"><a href="#氣泡排序（Bubble-Sort）" class="headerlink" title="氣泡排序（Bubble Sort）"></a>氣泡排序（Bubble Sort）</h2><p>氣泡排序是一種簡單的排序演算法，它的原理是依序比較相鄰的兩個元素，如果前一個元素大於後一個元素，就交換它們的位置，重複進行直到排序完成。因為排序過程中較大的元素像氣泡一樣慢慢浮到數列的右端，所以叫氣泡排序。</p><h3 id="實作步驟"><a href="#實作步驟" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>定義一個氣泡排序函數，傳入參數分別為 待排序的數列 arr[] 和 數列長度 n。</li><li>使用兩層循環進行排序，外層循環表示排序的輪數，內層循環表示每輪比較的次數。</li><li>如果前一個元素大於後一個元素，則使用 swap() 交換它們的位置。</li><li>在主函數中宣告一個待排序的數列，並計算數列。</li></ol><h3 id="動畫演示"><a href="#動畫演示" class="headerlink" title="動畫演示"></a>動畫演示</h3><p><img src="https://i.imgur.com/xwDhcSc.gif" alt="氣泡排序動畫演示"></p><h3 id="C-程式碼"><a href="#C-程式碼" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;   <span class="comment">// 定義氣泡排序函數，傳入參數為數列和數列長度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;   <span class="comment">// 外層循環表示排序的輪數，從0到n-2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;   <span class="comment">// 內層循環表示每輪比較的次數，從0到n-i-2</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;   <span class="comment">// 如果前一個元素大於後一個元素</span></span><br><span class="line">                <span class="built_in">swap</span>(arr[j], arr[j + <span class="number">1</span>]);  <span class="comment">// 交換它們的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 測試氣泡排序</span></span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 宣告變數 n 為數列長度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入要排序的數列長度：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];  <span class="comment">// 宣告陣列 arr 用以儲存待排序數列</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請依序輸入數列元素：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;   <span class="comment">// 重複 n 次輸入數值存入陣列 arr 中</span></span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bubbleSort</span>(arr, n);  <span class="comment">// 呼叫氣泡排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">// 利用迴圈依序輸出排序後的陣列元素</span></span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>為了避免因為相鄰元素相同而不必要的交換，可以在交換時加入判斷，只有在前一個元素比後一個元素大時才進行交換。</li><li>外層循環控制循環次數，每次循環時內層循環會比較相鄰的元素並交換它們的位置，如果沒有發生交換，就代表數列已經排好序了，可以提前結束循環，這樣可以減少不必要的比較。</li></ul><h3 id="時間＆空間複雜度"><a href="#時間＆空間複雜度" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：O(n^2)</p><blockquote><p>具體來說，每一輪排序都需要進行n-1次比較，而最多需要進行n-1輪排序。因此，總的比較次數為(n-1)+(n-2)+…+2+1=(n^2-n)/2，時間複雜度為O(n^2)。</p></blockquote></li><li><p>空間複雜度：O(1)</p><blockquote><p>因為它只需要使用常數級別的額外空間來存儲中間變量，不需要使用額外的數據結構或記憶體。這讓氣泡排序在空間有限的情況下依然可以使用。</p></blockquote></li></ul><h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>氣泡排序是一種簡單但效率較低的排序算法，通常只適用於小規模數據的排序。</p><p>實做時需要注意數列的驗證、排序的效率及排序穩定性等問題，才能保證排序的準確性和效率。</p><h2 id="選擇排序（Selection-Sort）"><a href="#選擇排序（Selection-Sort）" class="headerlink" title="選擇排序（Selection Sort）"></a>選擇排序（Selection Sort）</h2><p>選擇排序是一種簡單的排序演算法，它的原理是選擇最小的元素，與第一個元素交換位置，然後在剩下的元素中選擇最小的元素，與第二個元素交換位置，以此類推，重複直到排序完成。</p><h3 id="動畫演示-1"><a href="#動畫演示-1" class="headerlink" title="動畫演示"></a>動畫演示</h3><p><img src="https://i.imgur.com/VGRenb7.gif" alt="選擇排序動畫演示"></p><h3 id="實作步驟-1"><a href="#實作步驟-1" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>從未排序序列中尋找最小元素的索引。</li><li>將最小元素放到已排序序列的末尾。</li><li>重複進行1、2步直到所有元素都排序好。</li></ol><h3 id="C-程式碼-1"><a href="#C-程式碼-1" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span>&#123;  <span class="comment">// 定義選擇排序函式 傳入參數 arr 待排序陣列 和 n 陣列長度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;  <span class="comment">// 迴圈從0到n-2</span></span><br><span class="line">        <span class="type">int</span> min_index = i; <span class="comment">// 假設目前最小元素的索引是i</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;  <span class="comment">// 迴圈從i+1到n-1</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[min_index]) &#123; <span class="comment">// 如果找到一個比目前最小元素還小的元素</span></span><br><span class="line">                min_index = j; <span class="comment">// 更新最小元素的索引</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(arr[i], arr[min_index]); <span class="comment">// 把最小元素移到前面</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 測試選擇排序</span></span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 宣告變數 n 為數列長度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入要排序的數列長度：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];  <span class="comment">// 宣告陣列 arr 用以儲存待排序數列</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請依序輸入數列元素：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 重複 n 次輸入數值存入陣列 arr 中</span></span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">selectionSort</span>(arr, n);<span class="comment">// 呼叫選擇排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 利用迴圈依序輸出排序後的陣列元素</span></span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項-1"><a href="#注意事項-1" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>選擇排序演算法的時間複雜度為O(n^2)，在排序較大元素集合時性能不佳。</li><li>由於每次交換會帶來3次賦值操作，因此交換次數是比較耗時的。</li></ul><h3 id="時間＆空間複雜度-1"><a href="#時間＆空間複雜度-1" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：O(n^2)</p><blockquote><p>選擇排序的核心操作是選擇最小元素，將其與當前位置交換，而選擇最小元素需要在未排序的序列中進行線性搜索，因此需要執行n次循環和n次內層循環，時間複雜度為O(n^2)。</p></blockquote></li><li><p>空間複雜度：O(1)</p><blockquote><p>它是一種原地排序算法，不需要額外的空間存儲數據，只需要一個暫存變量即可。</p></blockquote></li></ul><h3 id="總結-1"><a href="#總結-1" class="headerlink" title="總結"></a>總結</h3><p>選擇排序演算法是一種簡單但效率較低的排序演算法，它適用於小型數據集的排序。</p><h2 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h2><p>將未排序的數據依次插入已排序序列中，形成新的已排序序列。</p><h3 id="動畫演示-2"><a href="#動畫演示-2" class="headerlink" title="動畫演示"></a>動畫演示</h3><p><img src="https://i.imgur.com/5F2355M.gif" alt="插入排序動畫演示"></p><h3 id="實作步驟-2"><a href="#實作步驟-2" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>從第一個元素開始，該元素可以認為已經被排序。</li><li>取出下一個元素，在已經排序的元素序列中從後向前掃描。</li><li>如果該元素（已排序）大於新元素，將該元素移到下一個位置。</li><li>重複步驟3，直到找到已排序的元素小於或等於新元素的位置。</li><li>將新元素插入到該位置後。</li><li>重複步驟2~5，直到排序完成。</li></ol><h3 id="C-程式碼-2"><a href="#C-程式碼-2" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123; <span class="comment">// 迴圈從1到n-1</span></span><br><span class="line">        <span class="type">int</span> key = arr[i]; <span class="comment">// 把要插入的元素存起來</span></span><br><span class="line">        <span class="type">int</span> j = i - <span class="number">1</span>; <span class="comment">// 設定插入點的初始值</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123; <span class="comment">// 如果插入點仍然在陣列範圍內，且前面的元素比插入元素大</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j]; <span class="comment">// 把元素往右移</span></span><br><span class="line">            j--; <span class="comment">// 往前找插入點</span></span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + <span class="number">1</span>] = key; <span class="comment">// 把元素插入到插入點的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 測試插入排序</span></span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 宣告變數 n 為數列長度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入要排序的數列長度：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];  <span class="comment">// 宣告陣列 arr 用以儲存待排序數列</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請依序輸入數列元素：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 重複 n 次輸入數值存入陣列 arr 中</span></span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">insertionSort</span>(arr, n);<span class="comment">// 呼叫插入排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 利用迴圈依序輸出排序後的陣列元素</span></span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項-2"><a href="#注意事項-2" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>正確設定陣列的大小，避免溢出或者誤判。</li><li>確認循環的邊界條件是否正確，避免越界。</li><li>插入排序的時間複雜度是 O(n^2)，當數據量很大時，性能較差。</li></ul><h3 id="時間＆空間複雜度-2"><a href="#時間＆空間複雜度-2" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：</p><ul><li>平均時間複雜度：O(n^2)</li><li><p>最壞時間複雜度：O(n^2)</p><blockquote><p>當數列是反向排列時，需要移動n*(n-1)/2個元素才能完成排序，因此時間複雜度為O(n^2)。</p></blockquote></li><li><p>最佳時間複雜度：O(n)</p><blockquote><p>當數列已經排好序時，每個元素只需比較一次即可確定其位置，因此時間複雜度為O(n)。</p></blockquote></li></ul></li><li><p>空間複雜度：O(1)</p><blockquote><p>因為它只需要使用一個額外的變量來保存當前要插入的元素，所以空間占用不會隨著數列大小而改變。插入排序演算法的空間複雜度比較小，對於內存有限的系統和設備具有優勢。</p></blockquote></li></ul><h3 id="總結-2"><a href="#總結-2" class="headerlink" title="總結"></a>總結</h3><p>插入排序對於小數據集合的排序是一種高效且穩定的算法。</p><h2 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h2><p>快速排序（Quick Sort）是一種常見的分治演算法，被認為是最快的排序演算法之一。它是選擇一個基準元素，通常是中間點，通過一趟排序將待排序列分為兩部分，其中一部分的所有元素都比基準元素小，另一部分的所有元素都比基準元素大，然後再按照此方法對這兩部分分別進行快速排序，直到整個序列有序。</p><h3 id="動畫演示-3"><a href="#動畫演示-3" class="headerlink" title="動畫演示"></a>動畫演示</h3><p><img src="https://i.imgur.com/0WcpwyB.gif" alt="快速排序動畫演示"></p><h3 id="實作步驟-3"><a href="#實作步驟-3" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>選擇區間中的一個元素作為 pivot。</li><li>將區間中小於 pivot 的元素放在左邊，大於 pivot 的元素放在右邊，並把 pivot 放到中間。</li><li>遞迴排序左區間和右區間，直到區間只剩下一個元素。</li></ol><h3 id="C-程式碼-3"><a href="#C-程式碼-3" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = left, j = right;</span><br><span class="line">    <span class="type">int</span> pivot = arr[(left + right) / <span class="number">2</span>]; <span class="comment">// 選擇中間點為基準點</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr[i] &lt; pivot) i++; <span class="comment">// 找到左邊大於等於基準點的元素</span></span><br><span class="line">        <span class="keyword">while</span> (arr[j] &gt; pivot) j--; <span class="comment">// 找到右邊小於等於基準點的元素</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt;= j) &#123; <span class="comment">// 如果左邊大於等於右邊，交換它們</span></span><br><span class="line">            <span class="built_in">swap</span>(arr[i], arr[j]);</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遞迴排序左半部分</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; j) &#123;</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, left, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遞迴排序右半部分</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt; right) &#123;</span><br><span class="line">        <span class="built_in">quickSort</span>(arr, i, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 測試快速排序</span></span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 宣告變數 n 為數列長度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入要排序的數列長度：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];  <span class="comment">// 宣告陣列 arr 用以儲存待排序數列</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請依序輸入數列元素：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 重複 n 次輸入數值存入陣列 arr 中</span></span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">quickSort</span>(arr, <span class="number">0</span>, n - <span class="number">1</span>);<span class="comment">// 呼叫快速排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 利用迴圈依序輸出排序後的陣列元素</span></span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項-3"><a href="#注意事項-3" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>需要注意邊界條件，例如遞迴結束的條件，以及數列下標的使用範圍。</li><li>快速排序是一個不穩定的排序演算法，相同元素的相對位置可能會在排序後發生變化。</li><li>在選擇 pivot 時，可以選擇任意一個元素作為 pivot，但選擇哪個 pivot 會影響到排序的效率。如果每次都選擇最小或最大的元素作為 pivot，就會導致最壞情況下的時間複雜度為 O(n^2)。因此，為了避免這種情況，可以選擇隨機的 pivot，通常選擇數列的中間元素作為 pivot，這樣可以確保每次排序的平均時間複雜度都是 O(nlogn)。</li></ul><h3 id="時間＆空間複雜度-3"><a href="#時間＆空間複雜度-3" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：</p><ul><li><p>平均時間複雜度：O(nlogn)</p><blockquote><p>在平均情況下，每次切分都能將數列分為近似相等的兩個子數列，快速排序的時間複雜度為O(nlogn)。</p></blockquote></li><li><p>最壞時間複雜度：O(n^2)</p><blockquote><p>當數列已經排好序或接近排好序時，選擇第一個或最後一個元素作為基準元素，時間複雜度會退化為O(n^2)。</p></blockquote></li></ul></li><li><p>空間複雜度：</p><ul><li><p>平均空間複雜度：O(logn)</p><blockquote><p>快速排序的空間複雜度主要取決於遞迴調用的深度。每一次遞迴調用都需要保存一定量的資料，包括基準值、左右子序列的開始和結束位置等。因此，快速排序的空間複雜度是O(log n)。</p></blockquote></li><li><p>最壞時間複雜度：O(n)</p><blockquote><p>當遞歸深度達到n時，需要額外O(n)的空間。</p></blockquote></li></ul></li></ul><h3 id="總結-3"><a href="#總結-3" class="headerlink" title="總結"></a>總結</h3><p>快速排序演算法是透過分治，達成高效率的排序演算法。它可以在短時間內對大型數據進行排序。儘管最壞情況下的時間複雜度較高，但在大多數情況下，它的表現都很優秀。</p><h2 id="合併排序（Merge-Sort）"><a href="#合併排序（Merge-Sort）" class="headerlink" title="合併排序（Merge Sort）"></a>合併排序（Merge Sort）</h2><p>合併排序（Merge Sort）是一種基於分治法的排序演算法，也是一種比較經典且常用的排序演算法之一。</p><p>合併排序的主要流程包括分解、排序和合併三個步驟。首先將要排序的序列分成兩部分，分別對這兩部分進行排序，最後將排好序的兩個部分合併起來即可得到排序後的序列。在排序的過程中，通過遞歸地將序列分解成小問題，再利用合併操作將小問題的解合併成原問題的解。</p><h3 id="動畫演示-4"><a href="#動畫演示-4" class="headerlink" title="動畫演示"></a>動畫演示</h3><p><img src="https://i.imgur.com/cGkLdI8.gif" alt="合併排序動畫演示"></p><h3 id="實作步驟-4"><a href="#實作步驟-4" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>定義合併函數 merge，接受兩個區間的起始位置，中間位置和結束位置。</li><li>在 merge 函數內部，使用一個指標 k 從左區間的起始位置開始遍歷，使用指針 i 和 j 分別遍歷左區間和右區間。</li><li>將指針 i 和 j 所指的值比較，選擇較小的放入暫存數組 tmp 中，直到其中一個指針超出區間範圍。</li><li>把另一個區間中剩餘的值放入暫存數組中。</li><li>將暫存數組中已排序的值拷貝回原區間。</li><li>定義 msort 函數，接受區間的起始位置和結束位置。</li><li>在 msort 函數中，當區間長度不足 1 時直接返回。</li><li>將區間從中間切開，遞歸排序左半邊和右半邊。</li><li>調用 merge 函數合併已排好序的左半邊和右半邊。</li><li>在主程式中，首先輸入要排序的數列長度和數列元素，然後建立臨時數組，最後呼叫 msort 函數對數列進行排序，並輸出排序後的數列。</li></ol><h3 id="C-程式碼-4"><a href="#C-程式碼-4" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> arr[], <span class="type">int</span> tmp[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 計算出中間點 mid</span></span><br><span class="line">    <span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// k 為臨時數組的下標，i、j 分別為兩個已排序區間的下標</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k=l, i=l, j=mid+<span class="number">1</span>; k&lt;=r; k++) &#123;</span><br><span class="line">        <span class="comment">// 如果 j 已經超出右半邊區間或者左半邊區間中的元素小於等於右半邊區間中的元素</span></span><br><span class="line">        <span class="keyword">if</span> (j&gt;r || (i&lt;=mid &amp;&amp; arr[i]&lt;=arr[j])) &#123;</span><br><span class="line">            <span class="comment">// 把左半邊區間中的元素存入臨時數組</span></span><br><span class="line">            tmp[k] = arr[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 把右半邊區間中的元素存入臨時數組</span></span><br><span class="line">            tmp[k] = arr[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把臨時數組中已排序的元素存回原始數組</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=l; i&lt;=r; i++) arr[i] = tmp[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義函數：有一陣列，排序區間 [l,r]</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">msort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> arr[], <span class="type">int</span> tmp[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 區間長度不足 2，已經是排好的</span></span><br><span class="line">    <span class="keyword">if</span> (r-l &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 從中間切斷，排序左半邊、右半邊</span></span><br><span class="line">        <span class="type">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">msort</span>(l,mid,arr,tmp);</span><br><span class="line">        <span class="built_in">msort</span>(mid+<span class="number">1</span>,r,arr,tmp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把兩個已排序的序列合併成一個已排序的序列</span></span><br><span class="line">        <span class="built_in">merge</span>(l,r,arr,tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 測試合併排序</span></span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 宣告變數 n 為數列長度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入要排序的數列長度：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];  <span class="comment">// 宣告陣列 arr 用以儲存待排序數列</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請依序輸入數列元素：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 重複 n 次輸入數值存入陣列 arr 中</span></span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tmp[n];  <span class="comment">// 建立臨時數組</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">msort</span>(<span class="number">0</span>, n<span class="number">-1</span>, arr, tmp);<span class="comment">// 呼叫合併排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 利用迴圈依序輸出排序後的陣列元素</span></span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項-4"><a href="#注意事項-4" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>在 merge 函數中使用指針時，初始值必須設置為左區間的起始位置，而不是 0。</li><li>merge 函數中，當指針 i 和 j 遍歷完其中一個區間時，還需要繼續遍歷另一個區間，直到其所有值都放入暫存數組中。</li><li>在 msort 函數中，對於拆分出來的兩個區間，左區間的結束位置應為 mid，右區間的起始位置應為 mid+1。</li></ul><h3 id="時間＆空間複雜度-4"><a href="#時間＆空間複雜度-4" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：</p><ul><li><p>平均時間複雜度：O(nlogn)</p><blockquote><p>在平均情況下，合併排序的時間複雜度為 O(nlogn)。這是因為在合併排序的過程中，每個數據都需要進行一次比較，而且每個數據都需要被移動到新數組中的正確位置，這樣每個數據都需要進行 logn 級別的操作。</p></blockquote></li><li><p>最壞時間複雜度：O(nlogn)</p><blockquote><p>在最壞情況下，合併排序需要將每個數據都進行比較和移動，即進行 n 次比較和移動操作，因此最壞情況下的時間複雜度也為 O(nlogn)。</p></blockquote></li><li><p>最佳時間複雜度：O(nlogn)</p><blockquote><p>在最佳情況下，合併排序的時間複雜度也為 O(nlogn)。因為合併排序是基於分治法的，每個子序列都會被排序，而且合併操作也需要 logn 級別的操作，因此最佳情況下也需要 O(nlogn) 的時間複雜度。</p></blockquote></li></ul></li><li><p>空間複雜度：O(n)</p><blockquote><p>合併排序需要額外的存儲空間來存儲排序過程中的數據，這些存儲空間的大小與待排序數列的大小相同。</p></blockquote></li></ul><h3 id="總結-4"><a href="#總結-4" class="headerlink" title="總結"></a>總結</h3><p>合併排序是一種高效穩定的排序算法，通過分治的思想，先拆分問題再合併解決。其時間複雜度為 O(n log n)，在處理大量數據時表現良好。在實作時需要注意指針的起始值、合併區間的邊界問題等細節。</p><h2 id="堆積排序（Heap-Sort）"><a href="#堆積排序（Heap-Sort）" class="headerlink" title="堆積排序（Heap Sort）"></a>堆積排序（Heap Sort）</h2><p>堆積排序（Heap Sort）是一種使用二元樹（Binary Tree）資料結構的排序演算法。</p><p>堆可以看作是一個完全二元樹，它具有以下兩個性質：</p><ol><li>父節點的值永遠大於或等於（小於或等於）子節點的值。</li><li>堆中任意節點的子樹都符合上述特點。</li></ol><h3 id="實作步驟-5"><a href="#實作步驟-5" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>建立堆：將待排序的數列轉換成一個堆。這一步可以通過從最後一個非葉子節點開始，對每個節點進行調整來實現。具體來說，對於一個父節點，如果它的子節點的值比它的值大（或小），就交換它們，直到子樹也是一個堆，調整完成後就得到了一個初始的大根堆。</li><li>排序：從堆的尾部開始，每次取出堆頂元素與堆尾元素交換位置。交換後，堆的長度減1，重複此操作直到堆的大小為1，由於每次都是取出堆頂元素，所以得到的數列就是有序的，以保證元素依然構成一個大根堆。</li></ol><h3 id="C-程式碼-5"><a href="#C-程式碼-5" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> largest = i; <span class="comment">// 初始化最大值為根節點</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>; <span class="comment">// 找到左子節點的索引</span></span><br><span class="line">    <span class="type">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>; <span class="comment">// 找到右子節點的索引</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123; <span class="comment">// 如果左子節點的值比最大值還要大</span></span><br><span class="line">        largest = left; <span class="comment">// 更新最大值的索引為左子節點的索引</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123; <span class="comment">// 如果右子節點的值比最大值還要大</span></span><br><span class="line">        largest = right; <span class="comment">// 更新最大值的索引為右子節點的索引</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (largest != i) &#123; <span class="comment">// 如果最大值不是根節點</span></span><br><span class="line">        <span class="built_in">swap</span>(arr[i], arr[largest]); <span class="comment">// 把最大值交換到根節點</span></span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, largest); <span class="comment">// 遞迴對以最大值為根的子樹進行heapify操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">// 建立最大堆</span></span><br><span class="line">        <span class="built_in">heapify</span>(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">// 進行堆排序</span></span><br><span class="line">        <span class="built_in">swap</span>(arr[<span class="number">0</span>], arr[i]); <span class="comment">// 把最大值與根節點交換</span></span><br><span class="line">        <span class="built_in">heapify</span>(arr, i, <span class="number">0</span>); <span class="comment">// 對剩餘元素進行heapify操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 測試堆積排序</span></span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 宣告變數 n 為數列長度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入要排序的數列長度：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];  <span class="comment">// 宣告陣列 arr 用以儲存待排序數列</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請依序輸入數列元素：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 重複 n 次輸入數值存入陣列 arr 中</span></span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">heapSort</span>(arr, n);<span class="comment">// 呼叫堆積排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 利用迴圈依序輸出排序後的陣列元素</span></span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="時間＆空間複雜度-5"><a href="#時間＆空間複雜度-5" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：O(nlogn)</p><blockquote><p>在堆積排序中，排序的主要操作是下潛，即將堆頂元素下潛到合適的位置，這個操作的時間複雜度是 O(logn)。在排序過程中，需要執行 n 次下潛操作，因此排序的時間複雜度為 O(nlogn)。</p></blockquote></li><li><p>空間複雜度：O(1)</p><blockquote><p>由於堆積排序是一種原地排序算法，因此它的空間複雜度是 O(1)，即不需要額外的空間。在堆排序中，只需要用到常數個變量作為中間變量，不需要額外的數組或其他數據結構。</p></blockquote></li></ul><h3 id="注意事項-5"><a href="#注意事項-5" class="headerlink" title="注意事項"></a>注意事項</h3><ol><li>記得使用交換操作來實現堆的調整和排序。</li><li>調整堆的時候，要先找到子節點中的最大值，然後再和父節點比較，如果子節點的值比父節點大，就將子節點的值上移。</li><li>調整堆的時候，要特別注意邊界情況，例如在定位左右子節點的時候，要判斷右子節點是否存在。</li></ol><h3 id="總結-5"><a href="#總結-5" class="headerlink" title="總結"></a>總結</h3><p>堆排序是一種高效的排序算法，它具有良好的時間複雜度和空間複雜度，並且它只需要一個輔助空間來存儲堆，可以實現原地排序，因此堆排序在排序大數據時非常有效。但是在實際應用中，由於堆排序的常數因子比較大，因此實際運行速度可能不如快速排序和插入排序等算法。</p><h2 id="希爾排序（Shell-Sort）"><a href="#希爾排序（Shell-Sort）" class="headerlink" title="希爾排序（Shell Sort）"></a>希爾排序（Shell Sort）</h2><p>希爾排序（Shell Sort）是一種插入排序的改進版，其基本思想是先將待排序的序列按照一定間隔分成幾個子序列，然後對每個子序列進行插入排序。接著逐步縮小間隔，重複進行上述操作，直到間隔縮小到1時，最後對整個序列進行一次插入排序，完成排序。</p><p>希爾排序的主要優點是在比較次數和移動次數上都有所改進。因為希爾排序采用分組的方式進行插入排序，每次排序可以使得一定程度上有序，因此在進行後面的排序時就可以利用前面排序時建立的有序性，減少比較次數和移動次數。此外，希爾排序不需要額外的內存空間，適合在內存較小的情況下進行排序。</p><h3 id="實作步驟-6"><a href="#實作步驟-6" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>首先選擇一個增量序列，這個序列的選擇可以影響希爾排序的效率。</li><li>將待排序的序列按照增量序列分成幾個子序列，對每個子序列進行插入排序。</li><li>逐步縮小增量序列，重複上述操作，直到增量為1時，最後對整個序列進行一次插入排序，完成排序。</li></ol><h3 id="C-程式碼-6"><a href="#C-程式碼-6" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化增量gap，設為n/2、n/4、n/8、...直到1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 以gap為間隔，對每個子序列進行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = arr[i];</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="comment">// 在子序列中進行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  <span class="comment">// 測試希爾排序</span></span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">// 宣告變數 n 為數列長度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入要排序的數列長度：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];  <span class="comment">// 宣告陣列 arr 用以儲存待排序數列</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請依序輸入數列元素：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 重複 n 次輸入數值存入陣列 arr 中</span></span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">shellSort</span>(arr, n);<span class="comment">// 呼叫希爾排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列：\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;  <span class="comment">// 利用迴圈依序輸出排序後的陣列元素</span></span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="時間＆空間複雜度-6"><a href="#時間＆空間複雜度-6" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：</p><blockquote><p>希爾排序的時間複雜度取決於子序列的間隔序列（Increment sequence），一般會使用Hibbard增量序列（Hibbard’s increment sequence），其公式為：h_k = 2^k - 1，其中k為子序列的索引，h_k為對應的增量。</p><ul><li>平均時間複雜度：O(n(logn)^2)</li><li>最壞時間複雜度：O(n(logn)^2)</li><li>最佳時間複雜度：O(n)</li></ul></blockquote></li><li><p>空間複雜度：O(1)</p><blockquote><p>希爾排序是一種原地排序算法，只需要一個輔助變量來進行元素交換，因此空間複雜度為O(1)。</p></blockquote></li></ul><h3 id="注意事項-6"><a href="#注意事項-6" class="headerlink" title="注意事項"></a>注意事項</h3><ol><li>在實際應用中，希爾排序的實現需要根據具體情況進行優化，選擇合適的增量序列，以及在實現中注意避免不必要的交換和比較操作，從而提高排序的效率。</li><li>增量序列的選擇很重要，通常建議使用Shell提出的增量序列（1, 4, 13, 40, …），但也可以根據具體情況進行調整。</li><li>插入排序可以使用直接插入排序或折半插入排序，具體選擇哪種排序算法可以根據實際情況進行選擇。</li><li>希爾排序的實現比較複雜，需要較好的理解和熟練的實現技巧。此外，在某些特殊情況下，希爾排序的效率可能會比其他排序算法低，因此在實際應用中需要仔細選擇排序算法。</li></ol><h3 id="總結-6"><a href="#總結-6" class="headerlink" title="總結"></a>總結</h3><p>希爾排序是一種高效的排序算法，它通常比傳統的插入排序要快很多，特別是對於大型數據集。希爾排序采用分組的方式進行插入排序，每次排序可以使得一定程度上有序，因此在進行後面的排序時就可以利用前面排序時建立的有序性，減少比較次數和移動次數。</p><h2 id="計數排序（Counting-Sort）"><a href="#計數排序（Counting-Sort）" class="headerlink" title="計數排序（Counting Sort）"></a>計數排序（Counting Sort）</h2><p>計數排序（Counting Sort）是一種線性時間的排序算法，它可以用於排序一定範圍內的整數。計數排序的核心思想是先統計每個元素出現的次數，然後根據元素出現的次數，將元素排列成有序序列。</p><h3 id="動畫演示-5"><a href="#動畫演示-5" class="headerlink" title="動畫演示"></a>動畫演示</h3><p><img src="https://i.imgur.com/5iGCVc1.gif" alt="計數排序動畫演示"></p><h3 id="實作步驟-7"><a href="#實作步驟-7" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>計算待排序數組中每個元素出現的次數。假設待排序的元素範圍為 [0, k]，則可以創建一個長度為 k+1 的計數數組，對於每個出現的元素值，在計數數組中相應的位置上加一。</li><li>對計數數組進行遍歷，依次累加前面所有元素的值，得到每個元素在有序序列中的位置。從計數數組的第二個元素開始，依次將前一個元素的值加到當前元素上，最終得到一個每個元素在有序序列中的位置的累加數組。</li><li>根據計數數組和有序序列的位置信息，將元素依次放入有序序列中。從原數組末尾開始，對每個元素值，從累加數組中取得對應的位置，把該元素放入有序序列中的該位置。每放入一個元素，該位置在累加數組中的值就需要減一。</li><li>將有序序列返回到原數組中。</li></ol><h3 id="C-程式碼-7"><a href="#C-程式碼-7" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義計數排序函數</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">countingSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> max_val = <span class="number">100</span>;  <span class="comment">// 假設元素的範圍為[0,100]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算元素出現的次數，初始化計數數組為0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(max_val + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count[arr[i]]++;  <span class="comment">// 計算arr[i]出現的次數</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 累加前面所有元素的值，得到每個元素在有序序列中的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= max_val; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];  <span class="comment">// 累加前面所有元素的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根據計數數組和有序序列的位置信息，將元素依次放入有序序列中</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        result[count[arr[i]] - <span class="number">1</span>] = arr[i];  <span class="comment">// 將arr[i]放到有序序列的對應位置上</span></span><br><span class="line">        count[arr[i]]--;  <span class="comment">// 將計數數組中對應元素的值減1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 將結果返回到原數組中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = result[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 測試計數排序函數</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入數組的大小：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;個整數，範圍為[0,100]：&quot;</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;  <span class="comment">// 定義一個整數向量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">countingSort</span>(arr);  <span class="comment">// 呼叫計數排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數組：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : arr) &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項-7"><a href="#注意事項-7" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>計數排序只適用於元素範圍較小的情況。如果元素範圍過大，則需要創建過大的計數數組，進而影響排序的效率和空間複雜度。</li><li>計數排序是一種穩定的排序演算法。如果待排序數組中有相等的元素，排序後相等元素的相對位置不會改變。</li><li>計數排序對於浮點數和負整數排序的支援不好。</li></ul><h3 id="時間＆空間複雜度-7"><a href="#時間＆空間複雜度-7" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：O(n+k)</p><blockquote><p>計數排序的時間複雜度可以分為兩部分：計數過程和排序過程。首先是計數過程，需要對整個序列進行一次遍歷，把每個元素出現的次數記錄在計數數組中。由於計數數組的大小等於待排序序列的範圍，因此計數過程的時間複雜度為 O(n+k)，其中 n 是序列的長度，k 是序列中元素的範圍。接下來是排序過程，需要遍歷待排序序列，根據計數數組中的信息將每個元素放置到排序好的位置上。由於只需要遍歷一次待排序序列，因此排序過程的時間複雜度為 O(n)。因此，計數排序的時間複雜度為 O(n+k)，其中 n 為待排序元素的數量，k 為待排序元素的最大值。需要注意的是，當範圍 k 比較大時，計數排序的效率可能會比較低。</p></blockquote></li><li><p>空間複雜度：O(k)</p><blockquote><p>計數排序的空間複雜度主要取決於計數數組的大小 k。因此，計數排序的空間複雜度為 O(k)。需要注意的是，當範圍 k 比較大時，計數排序的空間複雜度也會相應增加。</p></blockquote></li></ul><h3 id="總結-7"><a href="#總結-7" class="headerlink" title="總結"></a>總結</h3><p>計數排序是一種高效的排序算法，適用於元素範圍較小的場景，在各種應用中都有著廣泛的應用，例如對於年齡、成績等數值型數據的排序。</p><p>儘管它的時間複雜度比其他常用排序算法（如快速排序和合併排序）更小，但是它的應用受到了很大的限制，因為它需要在內存中創建一個大小為k的計數數組，如果k太大，計數數組將占用大量內存。此外，計數排序也不適用於具有負值元素的數組。</p><h2 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket Sort）"></a>桶排序（Bucket Sort）</h2><p>桶排序（Bucket Sort）是一種非常簡單的排序演算法，它的基本思想是將要排序的資料分為幾個桶，每個桶裡的資料都有一定的範圍。然後，對每個桶中的資料進行排序，最後按照桶的順序將所有桶中的資料合併起來。</p><h3 id="實作步驟-8"><a href="#實作步驟-8" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>建立一個 vector 來儲存待排序數列。</li><li>找出數列中的最大值和最小值，並算出每個桶的範圍。</li><li>建立桶(bucket)的數量，這裡以 10 個桶作為範例，並建立一個 vector，裡面包含了 10 個子 vector，分別代表每個桶的元素。</li><li>將數據分配到對應的桶中，具體的方法是透過取整和乘法來判斷數據應該放在哪個桶中。</li><li>對每個桶中的數據進行排序，可以使用 std::sort 函式。</li><li>將排序後的數據依次放回原數組中。</li></ol><h3 id="C-程式碼-8"><a href="#C-程式碼-8" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bucketSort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立桶(bucket)的數量，這裡以10個桶作為範例</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> bucket_num = <span class="number">10</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">buckets</span>(bucket_num);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 將數據分配到對應的桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> index = arr[i] / bucket_num;</span><br><span class="line">        buckets[index].<span class="built_in">push_back</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 對每個桶中的數據進行排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bucket_num; i++) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(buckets[i].<span class="built_in">begin</span>(), buckets[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 將排序後的數據依次放回原數組中</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; bucket_num; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; buckets[i].<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">            arr[k] = buckets[i][j];</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 測試桶排序函數</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入數列的大小: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;個整數: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">bucketSort</span>(arr);  <span class="comment">// 呼叫桶排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數列: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> num : arr) &#123;</span><br><span class="line">        cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項-8"><a href="#注意事項-8" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>桶的大小設置：桶的大小應當選擇適中的值，太小會增加排序的時間複雜度，太大會佔用過多的空間。</li><li>桶的數量：桶的數量應當根據數據的範圍和桶的大小進行設置。桶的數量不夠，會造成數據的堆積；桶的數量太多，會浪費空間。</li><li>將數據分配到桶(bucket)中時，要注意取整和乘法的方法，避免產生錯誤。</li><li>桶內部排序算法的選擇：桶內部的排序算法可以是任何一種穩定的排序算法，例如插入排序、冒泡排序等等。需要根據具體的應用場景選擇最優的算法。</li></ul><h3 id="時間＆空間複雜度-8"><a href="#時間＆空間複雜度-8" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：O(n+k)</p><blockquote><p>計數排序的時間複雜度可以分為兩部分：計數過程和排序過程。首先是計數過程，需要對整個序列進行一次遍歷，把每個元素出現的次數記錄在計數數組中。由於計數數組的大小等於待排序序列的範圍，因此計數過程的時間複雜度為 O(n+k)，其中 n 是序列的長度，k 是序列中元素的範圍。接下來是排序過程，需要遍歷待排序序列，根據計數數組中的信息將每個元素放置到排序好的位置上。由於只需要遍歷一次待排序序列，因此排序過程的時間複雜度為 O(n)。因此，計數排序的時間複雜度為 O(n+k)，其中 n 為待排序元素的數量，k 為待排序元素的最大值。需要注意的是，當範圍 k 比較大時，計數排序的效率可能會比較低。</p></blockquote></li><li><p>空間複雜度：O(n+k)</p><blockquote><p>桶排序的空間複雜度取決於桶的數量和每個桶內部元素的個數。由於每個桶內部的元素個數都不超過n/k，因此每個桶所需的空間是O(n/k)。總空間複雜度就是O(n + k)。如果k接近n，則空間複雜度就會接近O(n)。需要注意的是，當k比較大時，可能會出現空間浪費的情況，因此需要根據具體情況來選擇適當的桶數量。</p></blockquote></li></ul><h3 id="總結-8"><a href="#總結-8" class="headerlink" title="總結"></a>總結</h3><p>桶排序是一種簡單但有效的線性時間複雜度排序算法，優點是簡單易懂，而且比較容易實現。桶排序在數據分佈比較集中的情況下效果較好，但當數據分佈比較分散時，則會產生較多的桶(bucket)。適用於待排序數據分布範圍有限的情況。</p><h2 id="基數排序（Radix-Sort）"><a href="#基數排序（Radix-Sort）" class="headerlink" title="基數排序（Radix Sort）"></a>基數排序（Radix Sort）</h2><p>基數排序是一種非比較排序算法，適用於整數排序。基本思想是根據排序元素的位數，將整數按照位數從低到高或者從高到低進行排序，可以使用桶排序或計數排序等算法來實現。它的排序過程是先從最低有效位開始，依次對每一位進行排序，直到最高有效位。</p><p>例如，將一個整數序列按照個位、十位、百位的順序來排序。首先，按照個位進行排序，將序列中所有數字根據個位數分成10個桶，分別把它們放進對應的桶中。然後，按照桶的順序把數字放回原序列中。接下來，再按照十位進行排序，以此類推，直到按照最高有效位進行排序為止。</p><h3 id="動畫演示-6"><a href="#動畫演示-6" class="headerlink" title="動畫演示"></a>動畫演示</h3><p><img src="https://i.imgur.com/Gn1kHX9.gif" alt="基數排序動畫演示"></p><h3 id="實作步驟-9"><a href="#實作步驟-9" class="headerlink" title="實作步驟"></a>實作步驟</h3><ol><li>找出數組中最大的元素，確定最高位數，用變數 digit 記錄；</li><li>從最低位數開始，將數組中的元素按照該位數的值放入相應的桶子（桶子數量為 10，分別代表 0~9）中，並計算每個桶子中的元素個數；</li><li>計算每個桶子中元素在暫存陣列中的結束位置；</li><li>把元素按照桶子中的順序放入暫存陣列中；</li><li>把暫存陣列中的元素放回原陣列；</li><li>重複步驟 2~5 直到排序完成。</li></ol><h3 id="C-程式碼-9"><a href="#C-程式碼-9" class="headerlink" title="C++程式碼"></a>C++程式碼</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">radix_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> max = *<span class="built_in">max_element</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>()); <span class="comment">// 找出最大值</span></span><br><span class="line">    <span class="type">int</span> digit = <span class="number">1</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">tmp</span><span class="params">(arr.size())</span></span>; <span class="comment">// 建立暫存的 vector</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (max / digit &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 計數排序用的計數陣列</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 計算每個桶子中的元素個數</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> bucket = (arr[i] / digit) % <span class="number">10</span>;</span><br><span class="line">            count[bucket]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 計算每個桶子中元素在暫存陣列中的結束位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; count.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            count[i] += count[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把元素放入暫存陣列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = arr.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> bucket = (arr[i] / digit) % <span class="number">10</span>;</span><br><span class="line">            tmp[count[bucket] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            count[bucket]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把暫存陣列中的元素放回原陣列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            arr[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        digit *= <span class="number">10</span>; <span class="comment">// 到下一個數位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 測試基數排序函數</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入數組的大小：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;請輸入&quot;</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;個整數：&quot;</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;  <span class="comment">// 定義一個整數向量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">radix_sort</span>(arr);  <span class="comment">// 呼叫基數排序函式對 arr 進行排序</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序後的數組：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事項-9"><a href="#注意事項-9" class="headerlink" title="注意事項"></a>注意事項</h3><ul><li>基數排序適用於位數相同的數列排序，如果位數不同，需將所有數字補齊至相同位數。</li><li>每個位數的排序需要使用穩定排序算法，以保證相同位數上的數字相對位置不變。</li><li>實作時需要用到桶來存儲數字，桶的數量與基數相同，這將需要額外的空間開銷。</li></ul><h3 id="時間＆空間複雜度-9"><a href="#時間＆空間複雜度-9" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h3><ul><li><p>時間複雜度：O(d(n+k))</p><blockquote><p>其中 d 為最大位數，n 為數組大小，k 為桶子數量，通常為 10（代表數字 0~9）。因為每一位數都要進行一次計數排序，計數排序的時間複雜度為 O(n+k)，所以時間複雜度為 O(d(n+k))。</p></blockquote></li><li><p>空間複雜度：O(n+k)</p><blockquote><p>基數排序的空間複雜度主要由暫存陣列和計數陣列決定，因此空間複雜度為 O(n+k)。</p></blockquote></li></ul><h3 id="總結-9"><a href="#總結-9" class="headerlink" title="總結"></a>總結</h3><p>總結來說，基數排序是一種穩定性較好且時間複雜度為線性的排序算法，但對於數字位數較大的情況下，其空間複雜度較高，可能需要額外的存儲空間。基數排序的優點是能夠處理不同長度的數字，且在數字大小範圍有限的情況下，表現優於快速排序和堆排序。但是，它需要額外的空間儲存桶，且當數字大小範圍非常大時，需要大量的額外空間，並且其時間複雜度也會增加。</p><h1 id="排序演算法的分類"><a href="#排序演算法的分類" class="headerlink" title="排序演算法的分類"></a>排序演算法的分類</h1><h2 id="比較排序（Comparison-Sort）"><a href="#比較排序（Comparison-Sort）" class="headerlink" title="比較排序（Comparison Sort）"></a>比較排序（Comparison Sort）</h2><ul><li>交換排序（Exchange Sort）<ul><li>氣泡排序</li><li>快速排序</li></ul></li><li>選擇排序（Selection Sort）<ul><li>選擇排序</li><li>堆積排序</li></ul></li><li>插入排序（Insertion Sort）<ul><li>插入排序</li><li>希爾排序</li></ul></li><li>合併排序（Merge Sort）<ul><li>合併排序</li></ul></li></ul><h2 id="非比較排序（Non-Comparison-Sort）"><a href="#非比較排序（Non-Comparison-Sort）" class="headerlink" title="非比較排序（Non-Comparison Sort）"></a>非比較排序（Non-Comparison Sort）</h2><ul><li>計數排序</li><li>桶排序</li><li>基數排序</li></ul><h1 id="排序演算法的比較"><a href="#排序演算法的比較" class="headerlink" title="排序演算法的比較"></a>排序演算法的比較</h1><div class="table-container"><table><thead><tr><th>排序演算法</th><th>主要特點</th><th>優點</th><th>缺點</th></tr></thead><tbody><tr><td>氣泡排序（Bubble Sort）</td><td>一種簡單的交換排序演算法，每次將相鄰的元素進行比較和交換</td><td>實現簡單，程式易懂</td><td>時間複雜度較高，效率低</td></tr><tr><td>選擇排序（Selection Sort）</td><td>每次選出最小（大）的元素放到已排序序列的末尾</td><td>實現簡單，程式易懂，穩定</td><td>時間複雜度較高，效率低</td></tr><tr><td>插入排序（Insertion Sort）</td><td>將未排序元素逐個插入到已排序的序列中，從後往前比較</td><td>實現簡單，對小規模資料排序效率高</td><td>時間複雜度較高，對大規模資料排序效率較低</td></tr><tr><td>快速排序（Quick Sort）</td><td>分治策略，選定一個基準元素，將序列分為左右兩部分，遞迴排序</td><td>時間複雜度較低，效率較高，適用於大規模資料排序</td><td>不穩定，最壞情況下時間複雜度較高</td></tr><tr><td>合併排序（Merge Sort）</td><td>分治策略，將序列遞迴划分為子序列，然後將子序列合併</td><td>時間複雜度較低，效率較高，穩定</td><td>需要較大的輔助空間</td></tr><tr><td>堆排序（Heap Sort）</td><td>將序列構建成大根堆（小根堆），每次將堆頂元素與末尾元素交換，重新調整堆</td><td>時間複雜度較低，效率較高，適用於大規模資料排序</td><td>不穩定</td></tr><tr><td>希爾排序（Shell Sort）</td><td>插入排序的改進版本，設定一個增量，將序列劃分為若干子序列進行排序</td><td>對於中等規模資料排序效率較高</td><td>不穩定</td></tr><tr><td>計數排序（Counting Sort）</td><td>統計序列中各元素的出現次數，根據出現次數和元素值的關係排序</td><td>時間複雜度較低，適用於數據範圍較小的整數排序</td><td>對於數據範圍較大的情況需要較大的輔助空間</td></tr><tr><td>桶排序（Bucket Sort）</td><td>將元素劃分到不同的桶中，對每個桶中的元素進行排序，最後合併</td><td>適用於元素值分佈較均勻的情況，時間複雜度較低</td><td>對於元素值分佈不均勻的情況效率較低</td></tr><tr><td>基數排序（Radix Sort）</td><td>按照元素的位數進行排序，從低位到高位進行排序，每一位使用穩定排序演算法進行排序。</td><td>適用於大規模資料排序且穩定，可以處理多關鍵字排序</td><td>需要額外的記憶體空間且時間複雜度高，效率較低。</td></tr></tbody></table></div><h2 id="時間＆空間複雜度-10"><a href="#時間＆空間複雜度-10" class="headerlink" title="時間＆空間複雜度"></a>時間＆空間複雜度</h2><div class="table-container"><table><thead><tr><th>排序演算法</th><th>平均時間複雜度</th><th>最佳時間複雜度</th><th>最差時間複雜度</th><th>空間複雜度</th></tr></thead><tbody><tr><td>氣泡排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>選擇排序</td><td>O(n^2)</td><td>O(n^2)</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>插入排序</td><td>O(n^2)</td><td>O(n)</td><td>O(n^2)</td><td>O(1)</td></tr><tr><td>快速排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n^2)</td><td>O(logn)</td></tr><tr><td>合併排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(n)</td></tr><tr><td>堆積排序</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(nlogn)</td><td>O(1)</td></tr><tr><td>希爾排序</td><td>O(n(logn)^2)</td><td>O(n)</td><td>O(n(logn)^2)</td><td>O(1)</td></tr><tr><td>計數排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n+k)</td><td>O(k)</td></tr><tr><td>桶排序</td><td>O(n+k)</td><td>O(n+k)</td><td>O(n^2)</td><td>O(n+k)</td></tr><tr><td>基數排序</td><td>Ο(d×(n+k))</td><td>Ο(d×(n+k))</td><td>Ο(d×(n+k))</td><td>Ο(n×k)</td></tr></tbody></table></div><h1 id="文章總結"><a href="#文章總結" class="headerlink" title="文章總結"></a>文章總結</h1><p>在本文中，我們介紹了10種常見的排序演算法，每種演算法都有其優點和缺點。在實際應用中，需要根據具體的場景選擇最適合的排序演算法。</p><p>排序演算法是現代計算機科學中不可或缺的一部分。通過學習和理解排序演算法的原理和應用，可以更好地理解數據處理和計算的基礎，並且能夠應用這些技術來解決現實中的問題。</p><p>如果你想學習排序演算法，我建議你多做練習，利用此文章及網路上各種資源，了解各個演算法中的原理，並且試著用不同的方式實現這些演算法。通過不斷的練習，你將能更深入地理解這些排序演算法的原理和應用，希望此篇文章能讓你有所收穫！</p><p><img src="https://i.imgur.com/rvpFvDt.gif" alt="排序動畫"></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://zh.wikipedia.org/wiki/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95">維基百科：排序算法</a></li><li><a href="https://www.csie.ntu.edu.tw/~b98902112/cpp_and_algo/index.html">資料結構和演算法：排序演算法</a></li><li><a href="https://www.runoob.com/w3cnote/sort-algorithm-summary.html">菜鳥教程：排序算法</a></li><li><a href="https://www.toptal.com/developers/sorting-algorithms">排序算法動畫</a></li><li><a href="https://www.freecodecamp.org/news/sorting-algorithms-explained-with-examples-in-python-java-and-c/">Sorting Algorithm</a></li><li><a href="https://www.geeksforgeeks.org/sorting-algorithms/?ref=lbp">Sorting algorithms on GeeksforGeeks</a></li><li><a href="https://www.youtube.com/watch?v=kPRA0W1kECg">15 Sorting Algorithms in 6 Minutes - YT</a></li></ul><blockquote><p>此篇文章因內容繁多，所以在整理資料及撰寫上，可能會有些錯誤，也請大家多留言或善用右側聊天室提出問題，我會馬上勘誤修正，謝謝。</p></blockquote><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 程式筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 實作 </tag>
            
            <tag> C++ </tag>
            
            <tag> 排序演算法 Sort Algorithm </tag>
            
            <tag> 時間 &amp; 空間複雜度 </tag>
            
            <tag> 氣泡排序 Bubble Sort </tag>
            
            <tag> 選擇排序 Selection Sort </tag>
            
            <tag> 插入排序 Insertion Sort </tag>
            
            <tag> 快速排序 Quick Sort </tag>
            
            <tag> 合併排序 Merge Sort </tag>
            
            <tag> 堆積排序 Heap Sort </tag>
            
            <tag> 希爾排序 Shell Sort </tag>
            
            <tag> 計數排序 Counting Sort </tag>
            
            <tag> 桶排序 Bucket Sort </tag>
            
            <tag> 基數排序 Radix Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基礎資料結構 Data Structures (Python)</title>
      <link href="/SHIYU0318.github.io/post/Data-Structures-python/"/>
      <url>/SHIYU0318.github.io/post/Data-Structures-python/</url>
      
        <content type="html"><![CDATA[<p>資料結構是電腦中儲存、組織資料的方式<br>選擇好的資料結構是提升<code>演算法</code>效率的關鍵</p><h1 id="陣列-Array"><a href="#陣列-Array" class="headerlink" title="陣列 Array"></a>陣列 Array</h1><p>陣列是一種 <strong>線性串列</strong></p><ul><li>由<code>第 0 項</code>開始</li><li>儲存相同類型資料</li><li>使用一段<code>連續</code>的記憶體空間來存放</li><li>須<code>事先宣告</code>固定記憶體空間 容易造成浪費</li><li>讀取與修改串列的時間快速</li><li>刪除或插入資料需移動大量資料</li></ul><h2 id="一維陣列："><a href="#一維陣列：" class="headerlink" title="一維陣列："></a>一維陣列：</h2><p><img src="https://i.imgur.com/6qtEBHL.png" alt="一維陣列"></p><h2 id="二維陣列：平面"><a href="#二維陣列：平面" class="headerlink" title="二維陣列：平面"></a>二維陣列：平面</h2><p><img src="https://i.imgur.com/J2HYYzl.png" alt="二維陣列"></p><h2 id="三維陣列：立方體"><a href="#三維陣列：立方體" class="headerlink" title="三維陣列：立方體"></a>三維陣列：立方體</h2><p><img src="https://i.imgur.com/NSeScea.png" alt="三維陣列"></p><h2 id="以Python程式碼表示"><a href="#以Python程式碼表示" class="headerlink" title="以Python程式碼表示"></a>以Python程式碼表示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Array</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#一維陣列</span></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">2</span>]) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#二維陣列</span></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>][<span class="number">1</span>]) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#三維陣列</span></span><br><span class="line">c = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]])</span><br><span class="line"><span class="built_in">print</span>(c[<span class="number">0</span>][<span class="number">1</span>][<span class="number">2</span>]) <span class="comment">#6</span></span><br></pre></td></tr></table></figure><blockquote><p>使用NumPy套件來運用Array資料型態</p></blockquote><h1 id="鏈結串列-Linked-list"><a href="#鏈結串列-Linked-list" class="headerlink" title="鏈結串列 Linked list"></a><strong><strong>鏈結串列 Linked list</strong></strong></h1><ul><li>記憶體位置<code>不連續</code> 隨機儲存</li><li>不需事先定義連續記憶體空間</li><li>利用每個node中的<code>pointer</code>指向下一個node</li><li>以<code>NULL</code>來代表Linked list的<code>終點</code></li><li>刪除或插入資料方便 只需要<code>更動指標的指向</code></li><li>查詢特定節點時 必須從頭開始走訪</li></ul><p><img src="https://i.imgur.com/usgTie6.png" alt="Image"></p><h2 id="鏈結串列-Linked-List-建立的方法"><a href="#鏈結串列-Linked-List-建立的方法" class="headerlink" title="鏈結串列(Linked List)建立的方法"></a><strong><strong>鏈結串列(Linked List)建立的方法</strong></strong></h2><ul><li><strong>append:</strong> 在尾部新增節點</li><li><strong>insertAt:</strong> 在特定位置插入節點</li><li><strong>removeAt:</strong> 刪除特定位置節點</li><li><strong>remove:</strong> 刪除特定資料節點</li><li><strong>indexOf:</strong> 回傳第一個出現指定資料的節點位置，空值則回傳-1</li><li><strong>isEmpty:</strong> 確認是否為空串列</li><li><strong>size:</strong> 串列的長度</li><li><strong>print:</strong> 印出串列所有資料</li></ul><h2 id="實作Linked-list-Python"><a href="#實作Linked-list-Python" class="headerlink" title="實作Linked list(Python)"></a>實作Linked list(Python)</h2><p>以<code>class(類別)</code>來實作Linked list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Linked List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, head=<span class="literal">None</span></span>):</span><br><span class="line">        self.head = head</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            self.head = Node(data)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        current = self.head</span><br><span class="line">        <span class="keyword">while</span> current.<span class="built_in">next</span>:</span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        current.<span class="built_in">next</span> = Node(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertAt</span>(<span class="params">self, index, data</span>):</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self.size():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        node = Node(data)</span><br><span class="line">        current = self.head</span><br><span class="line">        previous = <span class="literal">None</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            self.head = Node(data, node)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> count != index:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                previous = current</span><br><span class="line">                current = current.<span class="built_in">next</span></span><br><span class="line">            new_node = Node(data, previous.<span class="built_in">next</span>)</span><br><span class="line">            previous.<span class="built_in">next</span> = new_node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removeAt</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self.size():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        current = self.head</span><br><span class="line">        previous = <span class="literal">None</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            self.head = current.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">while</span> count != index:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                previous = current</span><br><span class="line">                current = current.<span class="built_in">next</span></span><br><span class="line">            previous.<span class="built_in">next</span> = current.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, data, <span class="built_in">all</span>=<span class="literal">False</span></span>):</span><br><span class="line">        current = self.head</span><br><span class="line">        previous = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            <span class="keyword">if</span> current.data == data:</span><br><span class="line">                <span class="keyword">if</span> previous:</span><br><span class="line">                    previous.<span class="built_in">next</span> = current.<span class="built_in">next</span></span><br><span class="line">                    current.<span class="built_in">next</span> = current</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.head = current.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                previous = current</span><br><span class="line">                current = current.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">indexOf</span>(<span class="params">self, data</span>):</span><br><span class="line">        node = self.head</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            <span class="keyword">if</span> node.data == data:</span><br><span class="line">                <span class="keyword">return</span> count</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isEmpty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.head <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.head:</span><br><span class="line">            <span class="built_in">print</span>(self.head)</span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            end = <span class="string">&quot; -&gt; &quot;</span></span><br><span class="line">            <span class="built_in">print</span>(node.data, end=end)</span><br><span class="line">            node = node.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">ll = LinkedList()</span><br><span class="line"><span class="built_in">print</span>(ll.isEmpty())<span class="comment">#True</span></span><br><span class="line">ll.append(<span class="number">10</span>)</span><br><span class="line">ll.append(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.isEmpty())<span class="comment">#False</span></span><br><span class="line"><span class="built_in">print</span>(ll.<span class="built_in">print</span>())<span class="comment">#10 -&gt; 20 -&gt; None</span></span><br><span class="line">ll.insertAt(<span class="number">1</span>,<span class="number">60</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.<span class="built_in">print</span>())<span class="comment">#10 -&gt; 60 -&gt; 20 -&gt; None</span></span><br><span class="line">ll.append(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.<span class="built_in">print</span>())<span class="comment">#10 -&gt; 60 -&gt; 20 -&gt; 20 -&gt; None</span></span><br><span class="line">ll.remove(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.<span class="built_in">print</span>())<span class="comment">#10 -&gt; 60 -&gt; 20 -&gt; None</span></span><br><span class="line">ll.removeAt(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.<span class="built_in">print</span>())<span class="comment">#10 -&gt; 20 -&gt; None</span></span><br><span class="line">ll.remove(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(ll.size())<span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(ll.<span class="built_in">print</span>())<span class="comment">#10 -&gt; None</span></span><br></pre></td></tr></table></figure><h1 id="陣列與鏈結串列的優缺點比較"><a href="#陣列與鏈結串列的優缺點比較" class="headerlink" title="陣列與鏈結串列的優缺點比較"></a><strong><strong>陣列與鏈結串列的優缺點比較</strong></strong></h1><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">陣列 Array</th><th style="text-align:center">鏈結串列Linked list</th></tr></thead><tbody><tr><td style="text-align:center">記憶體配置</td><td style="text-align:center">連續</td><td style="text-align:center">不連續</td></tr><tr><td style="text-align:center">取資料</td><td style="text-align:center">快</td><td style="text-align:center">慢</td></tr><tr><td style="text-align:center">追加資料</td><td style="text-align:center">慢</td><td style="text-align:center">快</td></tr><tr><td style="text-align:center">刪除資料</td><td style="text-align:center">慢</td><td style="text-align:center">快</td></tr></tbody></table></div><hr><h1 id="堆疊-Stack"><a href="#堆疊-Stack" class="headerlink" title="堆疊 Stack"></a>堆疊 Stack</h1><h2 id="「Last-In-First-Out」-後進先出的特性"><a href="#「Last-In-First-Out」-後進先出的特性" class="headerlink" title="「Last-In-First-Out」 後進先出的特性"></a><strong><code>「Last-In-First-Out」</code> 後進先出的特性</strong></h2><p>常用於網頁 <strong><code>undo</code></strong> 回到前一頁 的功能</p><p><img src="https://i.imgur.com/KGyzur5.png" alt="堆疊 Stack"></p><h2 id="堆疊-Stack-建立的方法"><a href="#堆疊-Stack-建立的方法" class="headerlink" title="堆疊(Stack)建立的方法"></a><strong>堆疊(Stack)建立的方法</strong></h2><ul><li><strong>push:</strong> <code>新增</code>元素</li><li><strong>pop:</strong> <code>從頂端移除</code>元素</li><li><strong>peek:</strong> <code>查看頂端</code>(top)元素</li><li><strong>size:</strong> 查看此堆疊的<code>元素量</code></li></ul><h2 id="使用鏈結串列實作Stack-Python"><a href="#使用鏈結串列實作Stack-Python" class="headerlink" title="使用鏈結串列實作Stack(Python)"></a>使用鏈結串列實作Stack(Python)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Stack</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StackNode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, top=<span class="literal">None</span></span>):</span><br><span class="line">        self.top = top</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.top = StackNode(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            current = StackNode(data)</span><br><span class="line">            current.<span class="built_in">next</span> = self.top</span><br><span class="line">            self.top = current</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.top = self.top.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.top.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        current = self.top</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">stack = LinkedStack()</span><br><span class="line">stack.push(<span class="string">&#x27;20&#x27;</span>)</span><br><span class="line">stack.push(<span class="string">&#x27;30&#x27;</span>)</span><br><span class="line">stack.push(<span class="string">&#x27;40&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(stack.size())<span class="comment">#3</span></span><br><span class="line"><span class="built_in">print</span>(stack.peek())<span class="comment">#&quot;40&quot;</span></span><br><span class="line">stack.pop()</span><br><span class="line"><span class="built_in">print</span>(stack.peek())<span class="comment">#&quot;30&quot;</span></span><br><span class="line"><span class="built_in">print</span>(stack.size())<span class="comment">#2</span></span><br><span class="line">stack.pop()</span><br><span class="line"><span class="built_in">print</span>(stack.size())<span class="comment">#1</span></span><br><span class="line"><span class="built_in">print</span>(stack.peek())<span class="comment">#&quot;20&quot;</span></span><br></pre></td></tr></table></figure><h1 id="佇列-Queue"><a href="#佇列-Queue" class="headerlink" title="佇列 Queue"></a>佇列 Queue</h1><h2 id="「First-In-First-Out」-先進先出的特性"><a href="#「First-In-First-Out」-先進先出的特性" class="headerlink" title="「First-In-First-Out」 先進先出的特性"></a><strong><code>「First-In-First-Out」</code> 先進先出的特性</strong></h2><p>常用於先到先執行 需要<code>排程</code>的應用</p><p><img src="https://i.imgur.com/Qm9CcOi.png" alt="佇列 Queue"></p><h2 id="佇列-Queue-建立的方法"><a href="#佇列-Queue-建立的方法" class="headerlink" title="佇列(Queue)建立的方法"></a><strong>佇列(Queue)建立的方法</strong></h2><ul><li><strong>enqueue:</strong> <code>尾端新增</code>元素</li><li><strong>dequeue:</strong> 從<code>前端移除</code>元素</li><li><strong>peek:</strong> <code>查看最前端</code>元素</li><li><strong>size:</strong> 此佇列的<code>元素量</code></li></ul><h2 id="使用鏈結串列實作Queue-Python"><a href="#使用鏈結串列實作Queue-Python" class="headerlink" title="使用鏈結串列實作Queue(Python)"></a>使用鏈結串列實作Queue(Python)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Queue</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QueueNode</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data=<span class="literal">None</span>, <span class="built_in">next</span>=<span class="literal">None</span></span>):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedQueue</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, front=<span class="literal">None</span>, rear=<span class="literal">None</span></span>):</span><br><span class="line">        self.front = front</span><br><span class="line">        self.rear = rear</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.front <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.front = QueueNode(data)</span><br><span class="line">            self.rear = self.front</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.rear.<span class="built_in">next</span> = QueueNode(data)</span><br><span class="line">            self.rear = self.rear.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.rear <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> self.front == self.rear:</span><br><span class="line">            self.rear = <span class="literal">None</span></span><br><span class="line">        self.front = self.front.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.front <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> self.front.data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        current = self.front</span><br><span class="line">        <span class="keyword">while</span> current:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            current = current.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">queue = LinkedQueue()</span><br><span class="line">queue.enqueue(<span class="string">&#x27;20&#x27;</span>)</span><br><span class="line">queue.enqueue(<span class="string">&#x27;30&#x27;</span>)</span><br><span class="line">queue.enqueue(<span class="string">&#x27;40&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(queue.peek())<span class="comment">#20</span></span><br><span class="line"><span class="built_in">print</span>(queue.size())<span class="comment">#3</span></span><br><span class="line">queue.dequeue()</span><br><span class="line"><span class="built_in">print</span>(queue.peek())<span class="comment">#30</span></span><br><span class="line"><span class="built_in">print</span>(queue.size())<span class="comment">#2</span></span><br><span class="line">queue.dequeue()</span><br><span class="line"><span class="built_in">print</span>(queue.peek())<span class="comment">#40</span></span><br><span class="line"><span class="built_in">print</span>(queue.size())<span class="comment">#1</span></span><br><span class="line">queue.dequeue()</span><br><span class="line"><span class="built_in">print</span>(queue.peek())<span class="comment">#None</span></span><br><span class="line"><span class="built_in">print</span>(queue.size())<span class="comment">#0</span></span><br></pre></td></tr></table></figure><hr><h1 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合 Set"></a>集合 Set</h1><p><strong><code>不能重複</code></strong> </p><h2 id="運算型態"><a href="#運算型態" class="headerlink" title="運算型態"></a>運算型態</h2><p><img src="https://i.imgur.com/CY4gaOl.png" alt="集合 Set 運算型態"></p><h2 id="Python-中-集合-Set-可使用的-方法-method"><a href="#Python-中-集合-Set-可使用的-方法-method" class="headerlink" title="Python 中 集合 Set 可使用的 方法(method)"></a>Python 中 集合 Set 可使用的 方法(method)</h2><div class="table-container"><table><thead><tr><th style="text-align:center">方法(method)</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">add()</td><td>為集合添加元素</td></tr><tr><td style="text-align:center">pop()</td><td>隨機移除元素</td></tr><tr><td style="text-align:center">remove()</td><td>移除指定元素</td></tr><tr><td style="text-align:center">clear()</td><td>移除集合中的所有元素</td></tr><tr><td style="text-align:center">copy()</td><td>複製一个集合</td></tr><tr><td style="text-align:center">union()</td><td>回傳兩集合的聯集</td></tr><tr><td style="text-align:center">update()</td><td>為集合添加元素</td></tr><tr><td style="text-align:center">difference()</td><td>回傳多個集合的差集</td></tr><tr><td style="text-align:center">difference_update()</td><td>移除集合中的元素 該元素在指定的集合也存在</td></tr><tr><td style="text-align:center">discard()</td><td>刪除集合中指定的元素</td></tr><tr><td style="text-align:center">intersection()</td><td>回傳集合的交集</td></tr><tr><td style="text-align:center">intersection_update()</td><td>回傳集合的交集</td></tr><tr><td style="text-align:center">isdisjoint()</td><td>判斷兩集合是否包含相同的元素 如果没有 回傳 True 否則回傳 False。</td></tr><tr><td style="text-align:center">issubset()</td><td>判斷指定集合是否為該方法参數集合的子集</td></tr><tr><td style="text-align:center">issuperset()</td><td>判斷該方法的参數集合是否為指定集合的子集</td></tr><tr><td style="text-align:center">symmetric_difference()</td><td>回傳兩集合中不重複的元素集合</td></tr><tr><td style="text-align:center">symmetric_difference_update()</td><td>移除當前集合中在另外一个指定集合相同的元素 並將另外一个指定集合中不同的元素插入到當前集合中</td></tr></tbody></table></div><h1 id="映射-Map"><a href="#映射-Map" class="headerlink" title="映射 Map"></a>映射 Map</h1><p>在Python中又稱Dict 字典 是以 鍵-值對(key-value) 存取的資料容器</p><p><img src="https://i.imgur.com/FAVkj9V.png" alt="映射 Map"></p><hr><h1 id="樹-Tree"><a href="#樹-Tree" class="headerlink" title="樹 Tree"></a>樹 Tree</h1><p><img src="https://i.imgur.com/uXQQ3oD.png" alt="樹 Tree"></p><h2 id="結構"><a href="#結構" class="headerlink" title="結構"></a>結構</h2><ul><li>節點 Node</li><li>根 root</li><li>葉節點 leaf</li><li>父 parent</li><li>子 child</li><li>兄弟 siblings</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>不包含迴路</li><li>任意兩節點僅有唯一的一條路徑</li><li>有 n 個節點 則會有 n - 1 條邊</li></ul><h1 id="堆積-Heap"><a href="#堆積-Heap" class="headerlink" title="堆積 Heap"></a>堆積 Heap</h1><h2 id="最小堆積-Min-Heap"><a href="#最小堆積-Min-Heap" class="headerlink" title="最小堆積 Min Heap"></a><strong>最小堆積 Min Heap</strong></h2><p>母節點的值恆≤子節點的值</p><h2 id="最大堆積-Max-Heap"><a href="#最大堆積-Max-Heap" class="headerlink" title="最大堆積 Max Heap"></a><strong>最大堆積 Max Heap</strong></h2><p>母節點的值恆≥子節點的值</p><p><img src="https://i.imgur.com/1LMvp8S.png" alt="堆積 Heap"></p><div class="table-container"><table><thead><tr><th>操作</th><th>描述</th><th>時間複雜度</th></tr></thead><tbody><tr><td>build</td><td>採用羅伯特·弗洛伊德提出的較快方式建立堆積</td><td>O(n)</td></tr><tr><td>insert</td><td>向堆積中插入一個新元素</td><td>O(log n)</td></tr><tr><td>update</td><td>將新元素提升使其符合堆積的性質</td><td>O(log n)</td></tr><tr><td>get</td><td>取得當前堆積頂元素的值</td><td>O(1)</td></tr><tr><td>delete</td><td>刪除堆積頂元素</td><td>O(log n)</td></tr><tr><td>heapify</td><td>使刪除堆積頂元素的堆積再次成為堆積</td><td>O(log n)</td></tr></tbody></table></div><hr><h1 id="雜湊-Hash"><a href="#雜湊-Hash" class="headerlink" title="雜湊 Hash"></a>雜湊 Hash</h1><p><code>常被用來加密 解密 壓縮 驗證</code></p><p>是透過<code>雜湊函式(Hash Function)</code>來計算出一個<code>鍵(key)與值(value)</code>所對應的位置 進而建立<code>雜湊表</code></p><blockquote><p><strong>雜湊表(Hash table)：</strong>是根據 <strong><code>鍵(Key)</code></strong> 而直接查詢在記憶體儲存位置的資料結構<br>也就是說 它通過計算出一個鍵值的函數 將所需查詢的數據 <strong><code>映射(Map)</code></strong> 到表中一個位置來讓人查詢<br>這加快了查找速度 這個映射函數稱做<code>雜湊函數</code> 存放記錄的數組稱做<code>雜湊表</code></p></blockquote><p>而後也能夠過雜湊函式來搜尋找出鍵值存放在表格的位置 由於動作都需要先經由雜湊函式來執行 且所計算出來的 <code>雜湊值(Hash Value)</code> 具有<code>不可逆</code>(無法逆向演算回原本的數值)的性質 因此可有效的保護密碼</p><p><img src="https://i.imgur.com/oJ9yR2B.png" alt="雜湊 Hash"></p><h2 id="雜湊表專有名詞"><a href="#雜湊表專有名詞" class="headerlink" title="雜湊表專有名詞"></a><strong>雜湊表專有名詞</strong></h2><ul><li><code>桶(Bucket):</code>雜湊表中儲存資料的位置，每一個位置對應唯一位址(Bucket Address)。</li><li><code>槽(Slot):</code>每一個桶中的資料欄位，例如：一筆資料有2個欄位，則代表桶中有2個槽。</li><li><code>碰撞(Collision):</code>若2筆資料經過雜湊函數運算後的雜湊值相同，也就是對應到相同位址時，稱為碰撞。</li><li><code>溢位(Overflow):</code>資料經過雜湊函數運算後，雜湊值所指向的桶位址已滿，無法再儲存，稱為溢位。</li></ul><h2 id="常見的雜湊演算法"><a href="#常見的雜湊演算法" class="headerlink" title="常見的雜湊演算法"></a><strong>常見的雜湊演算法</strong></h2><ul><li><strong><a href="https://zh.wikipedia.org/wiki/MD5">MD5</a></strong></li><li><strong><a href="https://zh.wikipedia.org/zh-tw/SHA%E5%AE%B6%E6%97%8F">SHA</a></strong></li><li><strong><a href="https://zh.wikipedia.org/zh-tw/%E6%97%8B%E8%BD%AC%E5%93%88%E5%B8%8C">Rolling Hash</a></strong></li></ul><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 程式筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 實作 </tag>
            
            <tag> Python </tag>
            
            <tag> 資料結構 Data Structures </tag>
            
            <tag> 堆疊 stack </tag>
            
            <tag> 佇列 queue </tag>
            
            <tag> 集合 set </tag>
            
            <tag> 映射 map </tag>
            
            <tag> 陣列 array </tag>
            
            <tag> 鏈結串列 Linked list </tag>
            
            <tag> 樹 tree </tag>
            
            <tag> 堆積 heap </tag>
            
            <tag> 雜湊 hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>職業達人訪談大啟示 輔導課期末報告</title>
      <link href="/SHIYU0318.github.io/post/Profession-Interview/"/>
      <url>/SHIYU0318.github.io/post/Profession-Interview/</url>
      
        <content type="html"><![CDATA[<h3 id="訪談日期：2022-12-10"><a href="#訪談日期：2022-12-10" class="headerlink" title="訪談日期：2022/12/10"></a>訪談日期：2022/12/10</h3><h3 id="訪談地點：竹崎高中"><a href="#訪談地點：竹崎高中" class="headerlink" title="訪談地點：竹崎高中"></a>訪談地點：竹崎高中</h3><h3 id="訪談對象：黃皇賓-老師"><a href="#訪談對象：黃皇賓-老師" class="headerlink" title="訪談對象：黃皇賓 老師"></a>訪談對象：黃皇賓 老師</h3><h3 id="畢業大學校系：中正大學"><a href="#畢業大學校系：中正大學" class="headerlink" title="畢業大學校系：中正大學"></a>畢業大學校系：中正大學</h3><h3 id="最高學歷：中正電機所"><a href="#最高學歷：中正電機所" class="headerlink" title="最高學歷：中正電機所"></a>最高學歷：中正電機所</h3><h3 id="曾經的職業：AI-軟體工程師"><a href="#曾經的職業：AI-軟體工程師" class="headerlink" title="曾經的職業：AI 軟體工程師"></a>曾經的職業：AI 軟體工程師</h3><h3 id="軟體工程師種類與其相關技術心智圖"><a href="#軟體工程師種類與其相關技術心智圖" class="headerlink" title="軟體工程師種類與其相關技術心智圖"></a>軟體工程師種類與其相關技術心智圖</h3><p><img src="https://i.imgur.com/uG5wDz9.png" alt="軟體工程師心智圖"></p><blockquote><p>此心智圖利用Diagrams.net軟體製作，為<strong>個人自製</strong>，若相關技術有錯誤部分請見諒，使用此圖請附註來源：ShiYu’s Blog</p></blockquote><h3 id="軟體工程師工作內容與關係"><a href="#軟體工程師工作內容與關係" class="headerlink" title="軟體工程師工作內容與關係"></a>軟體工程師工作內容與關係</h3><p><img src="https://i.imgur.com/qLsvKF5.png" alt="軟體工程師工作內容與關係"></p><h3 id="工作年資：5年"><a href="#工作年資：5年" class="headerlink" title="工作年資：5年"></a>工作年資：5年</h3><h3 id="工作單位：車輛研究測試中心"><a href="#工作單位：車輛研究測試中心" class="headerlink" title="工作單位：車輛研究測試中心"></a>工作單位：車輛研究測試中心</h3><blockquote><p>為中華民國經濟部所屬之非營利研究機構，成立於1990年10月。其宗旨為「提供具國際公信力之車輛及零組件檢測與認證服務，並從事相關之技術研發與產品品質改善發展業務，以達成保障行車安全，維護消費者權益與協助輔導車輛及零組件工業升級發展」。</p><p>網站：<a href="https://www.artc.org.tw/">https://www.artc.org.tw/</a></p></blockquote><h3 id="實際工作內容＆工作目標"><a href="#實際工作內容＆工作目標" class="headerlink" title="實際工作內容＆工作目標"></a>實際工作內容＆工作目標</h3><p>主要工作項目是<strong>為無人自駕車  開發辨識系統 利用AI辨識路況</strong> 以下為開發的相關技術：</p><p><img src="https://i.imgur.com/xgSIfWz.png" alt="無人自駕車技術"></p><p>目標：達成公司要求</p><blockquote><p>無人自駕車網頁連結：<a href="https://www.artc.org.tw/tw/research/detail/39">https://www.artc.org.tw/tw/research/detail/39</a></p></blockquote><h3 id="興趣何倫碼"><a href="#興趣何倫碼" class="headerlink" title="興趣何倫碼"></a><strong>興趣何倫碼</strong></h3><ul><li>研究型  I</li><li>實作型 R</li></ul><h3 id="重要學科"><a href="#重要學科" class="headerlink" title="重要學科"></a>重要學科</h3><ul><li>數學</li><li>物理</li><li>英文</li><li>資訊科技</li></ul><h3 id="相關的知識領域"><a href="#相關的知識領域" class="headerlink" title="相關的知識領域"></a>相關的知識領域</h3><ul><li>數學</li><li>物理</li><li>資訊電子</li><li>網路電信</li><li>工程科技</li><li>機械</li></ul><h3 id="須具備的主要能力"><a href="#須具備的主要能力" class="headerlink" title="須具備的主要能力"></a>須具備的主要能力</h3><ul><li>數學推理</li><li>科學能力</li><li>組織能力</li><li>閱讀理解</li><li>計算能力</li><li>外語能力</li><li>抽象推理</li><li>系統開發</li><li>溝通協作</li><li>資訊處理能力</li></ul><h3 id="所需的人格特質"><a href="#所需的人格特質" class="headerlink" title="所需的人格特質"></a>所需的人格<strong>特質</strong></h3><ul><li>探究性</li><li>合作性</li><li>堅毅性</li><li>自信心</li><li>變通性</li><li>客觀性</li><li>深思性</li><li>愛挑戰</li><li>有興趣</li><li>有熱忱</li><li>創意想法</li><li>抗壓性高</li></ul><h3 id="重視的核心素養"><a href="#重視的核心素養" class="headerlink" title="重視的核心素養"></a>重視的核心素養</h3><p>自主行動</p><ul><li>身心素質與自我精進</li><li>系統思考與解決問題</li><li>規劃執行與創新應變</li></ul><p>溝通互動</p><ul><li>資訊運用與溝通表達</li><li>科技資訊與媒體素養</li></ul><p>社會參與</p><ul><li>道德實踐與公民意識</li><li>人際關係與團隊合作</li></ul><h3 id="可滿足您的工作價值感"><a href="#可滿足您的工作價值感" class="headerlink" title="可滿足您的工作價值感"></a>可滿足您的工作價值感</h3><ul><li>創意追求</li><li>智性激發</li><li>成就感</li><li>經濟報酬</li><li>安全穩定</li><li>工作環境</li><li>上司關係</li><li>同事關係</li><li>錢多事少離家近</li></ul><h3 id="選擇這份工作的原因"><a href="#選擇這份工作的原因" class="headerlink" title="選擇這份工作的原因"></a>選擇這份工作的原因</h3><ul><li>本科生</li><li>有興趣</li><li>薪水高</li></ul><h3 id="為提升工作專業，需要在哪些部分努力"><a href="#為提升工作專業，需要在哪些部分努力" class="headerlink" title="為提升工作專業，需要在哪些部分努力"></a>為提升工作專業，需要在哪些部分努力</h3><ul><li>程式開發</li><li>產業技術</li><li>溝通能力</li></ul><h3 id="一句話形容從事此工作帶給您的感覺"><a href="#一句話形容從事此工作帶給您的感覺" class="headerlink" title="一句話形容從事此工作帶給您的感覺"></a>一句話形容從事此工作帶給您的感覺</h3><p>每天都有新的挑戰 以及繁忙的工作項目 覺得很具挑戰性 也需要非常強的抗壓性</p><h3 id="對這份工作喜歡程度-1-10"><a href="#對這份工作喜歡程度-1-10" class="headerlink" title="對這份工作喜歡程度 (1 ~ 10)"></a>對這份工作喜歡程度 (1 ~ 10)</h3><p><strong>7</strong></p><p>原因：因為投資報酬率高 </p><p>少三分：</p><ol><li>較有挑戰</li><li>事情太多做不完</li><li>長時間工作</li></ol><h3 id="分享最有挑戰性的經驗-如何解決此問題的"><a href="#分享最有挑戰性的經驗-如何解決此問題的" class="headerlink" title="分享最有挑戰性的經驗 如何解決此問題的"></a>分享最有挑戰性的經驗 如何解決此問題的</h3><p>發現開發的程式與實際執行測試的結果不符 需要Debug</p><p>透過不斷的模擬及測試 一步一步找出問題所在 並確實修正</p><blockquote><p>Debug：除錯或偵錯是發現和減少電腦程式或電子儀器裝置中程式錯誤的一個過程</p></blockquote><h3 id="遇到過什麼挫折或麼事情失敗-如何調適心情"><a href="#遇到過什麼挫折或麼事情失敗-如何調適心情" class="headerlink" title="遇到過什麼挫折或麼事情失敗 如何調適心情"></a>遇到過什麼挫折或麼事情失敗 如何調適心情</h3><p>Code寫不出來</p><p>去散散心就好 不要太專注於現有的困難</p><p>有時在散心放鬆時就能想到好辦法</p><h3 id="回憶大學所學，印象深刻的學習是什麼，對未來就業有什麼影響"><a href="#回憶大學所學，印象深刻的學習是什麼，對未來就業有什麼影響" class="headerlink" title="回憶大學所學，印象深刻的學習是什麼，對未來就業有什麼影響"></a>回憶大學所學，印象深刻的學習是什麼，對未來就業有什麼影響</h3><p>在那時候AI人工智慧是一個非常新的技術 在大學修了這門課</p><p>需要去找大量國外的技術論文 閱讀 學習 並實作</p><p>畢業後找到相關工作 符合市場需求</p><h3 id="有做過什麼特別印象深刻的產品或服務嗎"><a href="#有做過什麼特別印象深刻的產品或服務嗎" class="headerlink" title="有做過什麼特別印象深刻的產品或服務嗎?"></a>有做過什麼特別印象深刻的產品或服務嗎?</h3><p>運用AI開發無人自駕車的辨識系統 非常具技術性與專業性</p><h3 id="請問職場上男女比例"><a href="#請問職場上男女比例" class="headerlink" title="請問職場上男女比例"></a>請問職場上男女比例</h3><p>9:1</p><h3 id="對於這樣性別分布情形，你的想法是什麼"><a href="#對於這樣性別分布情形，你的想法是什麼" class="headerlink" title="對於這樣性別分布情形，你的想法是什麼"></a>對於這樣性別分布情形，你的想法是什麼</h3><p>分布不均 產業現況</p><h3 id="對此工作的未來願景"><a href="#對此工作的未來願景" class="headerlink" title="對此工作的未來願景"></a>對此工作的未來願景</h3><p>薪水變多 技術上更突破</p><h3 id="若未來想從事這份工作，有何建議或忠告"><a href="#若未來想從事這份工作，有何建議或忠告" class="headerlink" title="若未來想從事這份工作，有何建議或忠告"></a>若未來想從事這份工作，有何建議或忠告</h3><p>抗壓性要高 耐操</p><h3 id="所需相關證照"><a href="#所需相關證照" class="headerlink" title="所需相關證照"></a>所需相關證照</h3><p>相關科技畢業</p><h3 id="每日上班工時"><a href="#每日上班工時" class="headerlink" title="每日上班工時"></a>每日上班工時</h3><p>10幾個小時 責任制度為主</p><h3 id="薪水"><a href="#薪水" class="headerlink" title="薪水"></a>薪水</h3><p>新鮮人起薪：50000/月</p><p>月薪：7 ~ 8萬</p><p>福利：三節獎金</p><p>年薪：百萬以上</p><p>以下為各類工程師平均年薪圖：</p><p><img src="https://i.imgur.com/YtXkQVv.png" alt="工程師平均年薪"></p><h3 id="QA"><a href="#QA" class="headerlink" title="ＱＡ"></a>ＱＡ</h3><ol><li>軟體工程師的種類？（講三個）</li><li>需要什麼能力 或特質（講三個）</li><li>月薪多少？</li></ol><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 報告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 軟體工程師 </tag>
            
            <tag> 職業訪談 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>時間複雜度 &amp; 空間複雜度</title>
      <link href="/SHIYU0318.github.io/post/Big-O/"/>
      <url>/SHIYU0318.github.io/post/Big-O/</url>
      
        <content type="html"><![CDATA[<p><strong>當我們需要用比較客觀的方式去評斷一個演算法的效能好不好的時候 我們就會討論它的「時間複雜度」與「空間複雜度」</strong></p><h1 id="時間複雜度"><a href="#時間複雜度" class="headerlink" title="時間複雜度"></a>時間複雜度</h1><p><strong><code>計算一支程式丟到電腦上需要執行多久</code></strong></p><p>因為考量不同電腦計算能力的問題</p><p>所以速度不是以秒計算</p><p>正確來說 時間複雜度會用 <code>演算法執行需要幾個指令</code> 來計算</p><p>以 <strong><code>Big O</code></strong> 表示</p><p>只會紀錄 <strong><code>最高次方項</code></strong> 並忽略其所有的係數</p><p>以下為常見的時間複雜度：</p><h2 id="O-1-：常數時間"><a href="#O-1-：常數時間" class="headerlink" title="O(1)：常數時間"></a>O(1)：常數時間</h2><p>n 不管輸入多大 都不會影響程式的執行時間</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PrintINT</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O-n-：線性時間"><a href="#O-n-：線性時間" class="headerlink" title="O(n)：線性時間"></a>O(n)：線性時間</h2><p>隨輸入 n 的大小而影響 for迴圈執行次數</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Sum_1_to</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O-n-2-：平方時間"><a href="#O-n-2-：平方時間" class="headerlink" title="O(n^2)：平方時間"></a><strong>O(n^2)：平方時間</strong></h2><h3 id="巢狀迴圈"><a href="#巢狀迴圈" class="headerlink" title="巢狀迴圈"></a>巢狀迴圈</h3><p>執行 n * n 次 最高次方項為 n的2次方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Mult_table</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,i*j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O-2-n-：指數時間"><a href="#O-2-n-：指數時間" class="headerlink" title="O(2^n)：指數時間"></a>O(2^n)：指數時間</h2><h3 id="費波那契數列"><a href="#費波那契數列" class="headerlink" title="費波那契數列"></a>費波那契數列</h3><h2 id="O-log-n-：對數時間"><a href="#O-log-n-：對數時間" class="headerlink" title="O(log n)：對數時間"></a><strong><strong>O(log n)：對數時間</strong></strong></h2><h3 id="二分搜尋法"><a href="#二分搜尋法" class="headerlink" title="二分搜尋法"></a><strong><strong>二分搜尋法</strong></strong></h3><p>log 以 2 為底 每次從中間開始搜尋 並排除另一半</p><p><img src="https://i.imgur.com/kv2H7kv.png" alt="Image"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Numbers = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">13</span>,<span class="number">14</span>]</span><br><span class="line">Find = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">low = <span class="number">0</span></span><br><span class="line">high = <span class="built_in">len</span>(Numbers) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> low &lt;= high:</span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> Numbers[mid] &gt; Find:</span><br><span class="line">        high = mid - <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> Numbers[mid] &lt; Find:</span><br><span class="line">        low = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mid)</span><br></pre></td></tr></table></figure><h2 id="O-n-log-n-：線性對數時間"><a href="#O-n-log-n-：線性對數時間" class="headerlink" title="O(n log n)：線性對數時間"></a>O(n log n)：線性對數時間</h2><h3 id="合併排序"><a href="#合併排序" class="headerlink" title="合併排序"></a>合併排序</h3><h2 id="常見時間複雜度比較"><a href="#常見時間複雜度比較" class="headerlink" title="常見時間複雜度比較"></a>常見時間複雜度比較</h2><p><img src="https://i.imgur.com/bBparm0.png" alt="Image"></p><hr><h1 id="空間複雜度"><a href="#空間複雜度" class="headerlink" title="空間複雜度"></a>空間複雜度</h1><p><strong>一支程式在執行時需要耗費多少的記憶體資源</strong></p><p><strong>時間複雜度 與 空間複雜度 之間可以相互 <code>trade off</code></strong> </p><blockquote><p><strong>trade off 效益悖反</strong>: 讓程式多用一些記憶體空間 可以省去重複的運算來加速程式的執行時間 或 沒有多餘的記憶體資源可以使用 可以透過把一些原本可以靠記憶體存儲的資訊改用重複計算的方式來取得</p></blockquote><h2 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a><strong>O(1)</strong></h2><p>程式 不會 因為 n 輸入的大小而影響需要使用的記憶體容量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Print_1_to</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a><strong>O(n)</strong></h2><p>程式 會 因為輸入 n 的大小而影響它會使用的記憶體容量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Create_Array</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,arr[n];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        arr[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      <categories>
          
          <category> 程式筆記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 時間 &amp; 空間複雜度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>網站頁面導覽</title>
      <link href="/SHIYU0318.github.io/post/Sitemap/"/>
      <url>/SHIYU0318.github.io/post/Sitemap/</url>
      
        <content type="html"><![CDATA[<h1 id="歡迎來到-ShiYu’s-Blog-！"><a href="#歡迎來到-ShiYu’s-Blog-！" class="headerlink" title="歡迎來到 ShiYu’s Blog ！"></a>歡迎來到 ShiYu’s Blog ！</h1><h2 id="導覽"><a href="#導覽" class="headerlink" title="導覽"></a>導覽</h2><a class="btn-beautify blue" href="https://shiyu0318.github.io/link/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a><ol><li>自我介紹 About me <a class="btn-beautify blue" href="https://shiyu0318.github.io/about/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>第一篇文章 Hello, World. <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/Hello-World/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>時間複雜度＆空間複雜度 Big O <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/Big-O/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>職業達人訪談大啟示 輔導課期末報告 <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/Profession-Interview/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>基礎資料結構 Data Structures (Python) <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/Data-Structures-python/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>排序演算法 Sort Algorithm (C++) <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/Sort-Algorithm/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>南大附中 資訊研究社 創社計畫 <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/NFIRC/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>資訊學科能力競賽 競賽過程 + 解題程式碼 + 心得 <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/NHSPC/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>C++ STL 內建基礎資料結構 <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/Data-Structures-basic/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>C++ 進階資料結構實作 <a class="btn-beautify blue" href="https://shiyu0318.github.io/post/Data-Structures-advanced/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>AI 人工智慧與深度學習 (撰寫中 待發布…)</li><li>神經網路的計算 (撰寫中 待發布…)</li><li>光波二象性 狹縫干涉與繞射實驗 物理期末報告 (撰寫中 待發布…)</li><li>量子力學 學習筆記 &amp; 研究報告 (撰寫中 待發布…)</li><li>量子運算 IBM Qiskit (撰寫中 待發布…)</li><li>連結彙整頁面 <a class="btn-beautify blue" href="https://shiyu0318.github.io/link/"   title="點擊前往"><i class="fa-solid fa-hand-point-right"></i><span>點擊前往</span></a></li><li>歡迎自由探索整個網頁！</li></ol><h2 id="網頁架構"><a href="#網頁架構" class="headerlink" title="網頁架構"></a>網頁架構</h2><ul><li>主頁 Home<ul><li>網頁封面</li><li>側邊資訊欄</li><li>文章推薦</li></ul></li><li>文章 Posts<ul><li>此網頁所有文章</li></ul></li><li>標籤 Tags<ul><li>所有文章所提及的標籤、關鍵字</li></ul></li><li>分類 Categories<ul><li>針對特定主題分類文章</li></ul></li><li>連結 Link<ul><li>聯繫資訊</li><li>南附資研社</li><li>SCIST南臺灣資訊學生社群</li><li>相關技術</li><li>學習資源</li><li>Discord程式社群討論伺服器</li><li>程式平台</li><li>軟體工具</li><li>Blogs</li></ul></li><li>關於<ul><li>自我介紹</li><li>學習歷程</li><li>經歷</li><li>競賽</li><li>專案</li></ul></li></ul><h1 id="感謝閱覽此網頁！"><a href="#感謝閱覽此網頁！" class="headerlink" title="感謝閱覽此網頁！"></a>感謝閱覽此網頁！</h1><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 網頁導覽 Site map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello, World.</title>
      <link href="/SHIYU0318.github.io/post/Hello-World/"/>
      <url>/SHIYU0318.github.io/post/Hello-World/</url>
      
        <content type="html"><![CDATA[<h2 id="歡迎來到士育的部落格！"><a href="#歡迎來到士育的部落格！" class="headerlink" title="歡迎來到士育的部落格！"></a>歡迎來到士育的部落格！</h2><h3 id="網頁介紹"><a href="#網頁介紹" class="headerlink" title="網頁介紹"></a>網頁介紹</h3><p>此網頁使用了 <a href="https://hexo.io/zh-tw/">Hexo靜態網頁框架</a></p><p>部署在 <a href="https://pages.github.com/">Github pages</a> 上</p><p>我使用的Theme主題是 <a href="https://butterfly.js.org/">Butterfly</a></p><h3 id="網頁用途"><a href="#網頁用途" class="headerlink" title="網頁用途"></a>網頁用途</h3><p>這裡是我的程式筆記網頁</p><p>內容包括我所學到的 資料結構 演算法 </p><p>不會有程式語言基礎語法 因為網路上資源多且詳細</p><p>筆記中的內容或許會有小錯誤或不完整 所以我會不斷的更新修改</p><p>我也會不定期的發佈 程式解題 技術分享 知識筆記 還有各種心得紀錄 …</p><p>有興趣的人可以參閱其他文章或到上方其他頁面看看</p><p>如果你對文章有任何想法或建議 歡迎在文章下方評論區登入Github帳號 留下你的看法</p><p>或是可以直接使用右側中間的 線上聊天室功能 傳訊息給我 我會盡快回覆你的訊息</p><p>若你想開始學程式 請到上方 link 連結 的頁面 我有放許多資源可以提供你學習</p><p>提供的資源涵蓋 各種程式語言的基礎語法 以及各種程式相關平台 工具…</p><p>以及各個程式社群的 Discord 伺服器</p><p>希望能對你有所幫助 ！</p><h3 id="網址"><a href="#網址" class="headerlink" title="網址"></a>網址</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://shiyu0318.github.io</span><br></pre></td></tr></table></figure><hr><h1 id="點擊回到導覽頁面"><a href="#點擊回到導覽頁面" class="headerlink" title="點擊回到導覽頁面"></a><a href="https://shiyu0318.github.io/post/Sitemap/">點擊回到導覽頁面</a></h1><hr>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
